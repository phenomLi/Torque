!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U();else if("function"==typeof define&&define.amd)define([],U);else{var F=U();for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(window,(function(){return function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}return F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)F.d(B,I,function(U){return Q[U]}.bind(null,I));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=10)}([function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports._tempVector4 = exports._tempVector3 = exports._tempVector2 = exports._tempVector1 = exports.Vector = void 0;\r\n// 二维向量 {x, y}\r\nclass Vector {\r\n    constructor(x, y) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        if (x !== undefined && y !== undefined) {\r\n            this.set(x, y);\r\n        }\r\n    }\r\n    //-------------操作----------------\r\n    /**\r\n     * 设置值\r\n     * @param x\r\n     * @param y\r\n     */\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * 相加\r\n     * @param v\r\n     */\r\n    add(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x + v.x;\r\n        out.y = this.y + v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 相减\r\n     * @param v\r\n     */\r\n    sub(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x - v.x;\r\n        out.y = this.y - v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 点积\r\n     * @param v\r\n     */\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    /**\r\n     * 叉积\r\n     * @param v\r\n     */\r\n    cro(v) {\r\n        return this.x * v.y - v.x * this.y;\r\n    }\r\n    /**\r\n     * 与标量进行叉积\r\n     * @param n\r\n     */\r\n    croNum(n, out) {\r\n        out = out || new Vector();\r\n        out.x = -n * this.y;\r\n        out.y = n * this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 投影\r\n     * @param v\r\n     */\r\n    pro(v) {\r\n        return this.dot(v) / v.len();\r\n    }\r\n    /**\r\n     * 法向\r\n     */\r\n    nor(out) {\r\n        out = out || new Vector();\r\n        out.x = this.y;\r\n        out.y = -this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 求模\r\n     */\r\n    len() {\r\n        return Math.hypot(this.x, this.y);\r\n    }\r\n    /**\r\n     * 平方模（节省求平方根操作）\r\n     */\r\n    len_s() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    /**\r\n     * 单位化\r\n     */\r\n    nol() {\r\n        let len = this.len();\r\n        if (len === 0) {\r\n            return new Vector();\r\n        }\r\n        this.x = this.x / len;\r\n        this.y = this.y / len;\r\n        return this;\r\n    }\r\n    /**\r\n     * 缩放\r\n     * @param n\r\n     */\r\n    scl(n, out) {\r\n        out = out || new Vector();\r\n        out.x = n * this.x;\r\n        out.y = n * this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 反向\r\n     */\r\n    inv(out) {\r\n        out = out || new Vector();\r\n        out.x = -this.x;\r\n        out.y = -this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 判断两向量是否相等\r\n     * @param v\r\n     */\r\n    eql(v) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    /**\r\n     * 求两向量夹角(弧度制)\r\n     * @param v\r\n     */\r\n    ang(v) {\r\n        return Math.acos(this.dot(v) / (this.len() * v.len()));\r\n    }\r\n    /**\r\n     * 克隆向量\r\n     */\r\n    col() {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n    /**\r\n     * 绕某点旋转向量\r\n     * @param radian 角度（弧度制）\r\n     * @param point 绕的点\r\n     */\r\n    rot(radian, point, out) {\r\n        out = out || new Vector();\r\n        let cos = Math.cos(radian), sin = Math.sin(radian), dx = this.x - point.x, dy = this.y - point.y;\r\n        out.x = point.x + (dx * cos - dy * sin);\r\n        out.y = point.y + (dx * sin + dy * cos);\r\n        return out;\r\n    }\r\n    /**\r\n     * 求一个向量（点）按照direction方向，延长len长度后的坐标\r\n     * @param direction\r\n     * @param len\r\n     */\r\n    loc(direction, len, out) {\r\n        out = out || new Vector();\r\n        direction = direction.nol();\r\n        out.x = this.x + direction.x * len;\r\n        out.y = this.y + direction.y * len;\r\n        return out;\r\n    }\r\n}\r\nexports.Vector = Vector;\r\n;\r\nexports._tempVector1 = new Vector();\r\nexports._tempVector2 = new Vector();\r\nexports._tempVector3 = new Vector();\r\nexports._tempVector4 = new Vector();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Util = void 0;\r\n// 常用工具函数\r\nexports.Util = {\r\n    _id: 0,\r\n    /**\r\n     * 生成一个id（整数类型）\r\n     */\r\n    id() {\r\n        return this._id++;\r\n    },\r\n    /**\r\n     * 根据两个id生成一个复合id（字符串类型）: 'id1.id2'\r\n     * @param id1\r\n     * @param id2\r\n     */\r\n    compositeId(id1, id2) {\r\n        if (id1 < id2) {\r\n            return id1 + '.' + id2;\r\n        }\r\n        else {\r\n            return id2 + '.' + id1;\r\n        }\r\n    },\r\n    /**\r\n     * 对象合并\r\n     * @param originOpt 源对象\r\n     * @param destOpt 目标对象\r\n     */\r\n    merge(originOpt, destOpt) {\r\n        if (!originOpt || !destOpt)\r\n            return;\r\n        for (let key in destOpt) {\r\n            if (typeof destOpt[key] === 'object' &&\r\n                !Array.isArray(destOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.merge(originOpt[key], destOpt[key]);\r\n            }\r\n            else {\r\n                if ((destOpt[key] !== null || destOpt[key] !== undefined) && originOpt[key] !== undefined) {\r\n                    originOpt[key] = destOpt[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 对象扩展\r\n     * @param originOpt 源对象\r\n     * @param extendOpt 扩展对象\r\n     */\r\n    extend(originOpt, extendOpt) {\r\n        if (!originOpt || !extendOpt)\r\n            return;\r\n        for (let key in extendOpt) {\r\n            if (typeof extendOpt[key] === 'object' &&\r\n                !Array.isArray(extendOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.extend(originOpt[key], extendOpt[key]);\r\n            }\r\n            else {\r\n                if (extendOpt[key] !== null || extendOpt[key] !== undefined)\r\n                    originOpt[key] = extendOpt[key];\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 从列表移除某个元素\r\n     * @param list 列表\r\n     * @param item 要移除的元素\r\n     */\r\n    remove(list, item) {\r\n        list.splice(list.findIndex(i => i['id'] === item['id']), 1);\r\n    },\r\n    /**\r\n     * 角度转弧度\r\n     * @param angle 角度\r\n     */\r\n    angle2Radian(angle) {\r\n        return (angle / 180) * Math.PI;\r\n    },\r\n    /**\r\n     * 弧度转角度\r\n     * @param radian 弧度\r\n     */\r\n    radian2Angle(radian) {\r\n        return radian / Math.PI * 180;\r\n    },\r\n    /**\r\n     * 返回页面加载完毕开始到当前的时间（微秒级，performance api）\r\n     */\r\n    now() {\r\n        return window.performance.now();\r\n    },\r\n    /**\r\n     * 直接插入排序\r\n     * @param list 要排序的列表\r\n     * @param fn 比较函数\r\n     */\r\n    insertSort(list, fn) {\r\n        let len = list.length, i, j, temp;\r\n        for (i = 1; i < len; i++) {\r\n            temp = list[i];\r\n            for (j = i - 1; j >= 0 && fn(list[j], temp) > 0; j--) {\r\n                list[j + 1] = list[j];\r\n            }\r\n            list[j + 1] = temp;\r\n        }\r\n    },\r\n    /**\r\n     * 对给定的value，收窄在min和max范围内\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     */\r\n    clamp(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    },\r\n    /**\r\n     * 返回一个数的正负号\r\n     * @param value\r\n     */\r\n    sign(value) {\r\n        return value < 0 ? -1 : 1;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 刚体基类：所有刚体继承自Body\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Body = exports.bodyType = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 刚体类型\r\n * 圆形：0\r\n * 多边形：1\r\n * 复合体：2\r\n */\r\nvar bodyType;\r\n(function (bodyType) {\r\n    bodyType[bodyType["circle"] = 0] = "circle";\r\n    bodyType[bodyType["polygon"] = 1] = "polygon";\r\n    bodyType[bodyType["composite"] = 2] = "composite";\r\n})(bodyType = exports.bodyType || (exports.bodyType = {}));\r\n;\r\nclass Body {\r\n    constructor(opt, type) {\r\n        this.id = util_1.Util.id();\r\n        this.stringId = this.id.toString();\r\n        this.type = type;\r\n        this.engine = null;\r\n        this.data = null;\r\n        this.origin = new vector_1.Vector(0, 0);\r\n        this.position = new vector_1.Vector(0, 0);\r\n        this.rotation = 0;\r\n        this.velocity = new vector_1.Vector(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.motion = 0;\r\n        this.mass = 10;\r\n        this.area = 0;\r\n        this.density = 1;\r\n        this.inertia = 0;\r\n        this.invInertia = 0;\r\n        this.force = new vector_1.Vector(0, 0);\r\n        this.torque = 0;\r\n        this.friction = 0.2;\r\n        this.restitution = 0.8;\r\n        this.static = false;\r\n        this.kinetic = false;\r\n        this.ignoreGravity = false;\r\n        this.sleeping = false;\r\n        this.sleepCounter = 0;\r\n        this.mask = 1;\r\n        this.bound = null;\r\n        this.contactBodies = {};\r\n        this.parent = null;\r\n        this.parts = [this];\r\n        this.methods = {\r\n            filter: (maskA, maskB) => { return true; },\r\n            beforeAppend: (body) => { },\r\n            afterAppend: (body) => { },\r\n            beforeRemove: (body) => { },\r\n            afterRemove: (body) => { },\r\n            sleepStart: (body) => { },\r\n            sleepEnd: (body) => { },\r\n            onCollide: (body) => { }\r\n        };\r\n        util_1.Util.extend(this, opt);\r\n        this.beforeInitializeProperties(opt);\r\n        this.area = this.getArea();\r\n        this.density = this.getDensity();\r\n        this.invMass = this.getInvMass();\r\n        this.position = this.getCentroid();\r\n        this.rotateCenter = this.position;\r\n        this.inertia = this.getInertia();\r\n        this.invInertia = this.getInvInertia();\r\n        this.axes = this.getAxes();\r\n        this.bound = this.getBound();\r\n        this.motion = this.velocity.len() ** 2 + this.angularVelocity ** 2;\r\n        this.afterInitializeProperties(opt);\r\n        // 用户一开始便设置了旋转的情况\r\n        if (this.rotation) {\r\n            this.rotate(this.rotation);\r\n        }\r\n        // 设置渲染函数\r\n        this.setRender(() => { });\r\n    }\r\n    /**\r\n     * 初始化属性前\r\n     */\r\n    beforeInitializeProperties(opt) { }\r\n    /**\r\n     * 初始化属性后\r\n     * @param opt\r\n     */\r\n    afterInitializeProperties(opt) { }\r\n    // ------------------------------------------- getter---------------------------------------\r\n    /**\r\n     * 计算质量倒数\r\n     */\r\n    getInvMass() {\r\n        return (this.mass === 0 || this.static || this.kinetic) ? 0 : 1 / this.mass;\r\n    }\r\n    /**\r\n     * 计算转动惯量倒数\r\n     */\r\n    getInvInertia() {\r\n        return (this.inertia === 0 || this.static || this.kinetic) ? 0 : 1 / this.inertia;\r\n    }\r\n    /**\r\n     * 计算密度\r\n     */\r\n    getDensity() {\r\n        return this.mass / this.area;\r\n    }\r\n    /**\r\n     * 计算面积\r\n     * @override\r\n     */\r\n    getArea() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 计算质心\r\n     * @override\r\n     */\r\n    getCentroid() {\r\n        return null;\r\n    }\r\n    /**\r\n     * 计算转动惯量\r\n     * @override\r\n     * @param position 转动中心\r\n     */\r\n    getInertia(position) {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 获取轴\r\n     */\r\n    getAxes() {\r\n        return [];\r\n    }\r\n    /**\r\n     * 获取包围盒\r\n     */\r\n    getBound() {\r\n        return null;\r\n    }\r\n    /**\r\n     * 获取刚体类型\r\n     */\r\n    getBodyType() {\r\n        if (this.type === 0) {\r\n            return \'circle\';\r\n        }\r\n        else if (this.type === 1) {\r\n            return \'polygon\';\r\n        }\r\n        else {\r\n            return \'composite\';\r\n        }\r\n    }\r\n    /**\r\n     * 获取复合刚体的子刚体\r\n     */\r\n    getChildren() {\r\n        return this.parts[0] !== this ? this.parts : null;\r\n    }\r\n    // ------------------------------------------- setter ---------------------------------------\r\n    /**\r\n     * 设置线速度\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setVelocity(x, y) {\r\n        this.velocity.x = x;\r\n        this.velocity.y = y;\r\n    }\r\n    /**\r\n     * 设置角速度\r\n     * @param angularVelocity\r\n     */\r\n    setAngularVelocity(angularVelocity) {\r\n        this.angularVelocity = angularVelocity;\r\n    }\r\n    /**\r\n     * 设置位置\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setPosition(x, y) {\r\n        let dx = x - this.position.x, dy = y - this.position.y;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.translate(dx, dy);\r\n    }\r\n    /**\r\n     * 设置旋转角度\r\n     * @param rotation\r\n     */\r\n    setRotation(rotation) {\r\n        this.rotation = rotation;\r\n        this.rotate(rotation);\r\n    }\r\n    /**\r\n     * 设置是否静态\r\n     * @param static\r\n     */\r\n    setStatic(sta) {\r\n        this.static = sta;\r\n    }\r\n    /**\r\n     * 设置是否运动\r\n     * @param kin\r\n     */\r\n    setKinetic(kin) {\r\n        this.kinetic = kin;\r\n    }\r\n    /**\r\n     * 设置用户想要携带的信息数据\r\n     * @param data 数据\r\n     */\r\n    setData(data) {\r\n        if (data !== null && data !== undefined) {\r\n            this.data = data;\r\n        }\r\n    }\r\n    /**\r\n     * 设置渲染函数\r\n     * @param fn\r\n     */\r\n    setRender(fn) {\r\n        if (fn && typeof fn === \'function\')\r\n            this.render = fn;\r\n    }\r\n    /**\r\n     * 是否包含某个顶点\r\n     * @override\r\n     * @param x\r\n     * @param y\r\n     */\r\n    isContains(x, y) {\r\n        return false;\r\n    }\r\n    // ------------------------------------------- 内部方法 ----------------------------------------\r\n    /**\r\n     * 位移刚体\r\n     * @override\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(dx, dy) { }\r\n    /**\r\n     * 旋转刚体\r\n     * @override\r\n     * @param angle 角度\r\n     */\r\n    rotate(angle) { }\r\n    /**\r\n     * 应用冲量\r\n     * @param impulse 冲量\r\n     * @param offset 作用点（本地坐标系）\r\n     * @param dt 步长\r\n     */\r\n    applyImpulse(impulse, offset) {\r\n        if (this.static || this.kinetic || this.sleeping)\r\n            return;\r\n        this.velocity.x += impulse.x * this.invMass;\r\n        this.velocity.y += impulse.y * this.invMass;\r\n        this.angularVelocity += this.invInertia * offset.cro(impulse);\r\n    }\r\n    /**\r\n     * 应用力\r\n     * @param force 力\r\n     * @param offset 作用点（本地坐标系）\r\n     */\r\n    applyForce(force, offset) {\r\n        if (this.static || this.kinetic)\r\n            return;\r\n        this.force.x += force.x;\r\n        this.force.y += force.y;\r\n        if (offset !== undefined) {\r\n            this.torque += offset.cro(this.force);\r\n        }\r\n    }\r\n    /**\r\n     * 积分受力\r\n     * @param dt\r\n     */\r\n    integrateForces(dt) {\r\n        if (this.static || this.kinetic || this.sleeping) {\r\n            return;\r\n        }\r\n        let airFriction = (1 - this.engine.airFriction / 20);\r\n        this.velocity.x = airFriction * this.velocity.x;\r\n        this.velocity.y = airFriction * this.velocity.y;\r\n        this.angularVelocity = airFriction * this.angularVelocity;\r\n        this.velocity.x += this.force.x * this.invMass * dt;\r\n        this.velocity.y += this.force.y * this.invMass * dt;\r\n        this.angularVelocity += this.torque * this.invInertia * dt;\r\n    }\r\n    /**\r\n     * 积分速度\r\n     * - 使用半隐式欧拉积分\r\n     * @param dt\r\n     */\r\n    integrateVelocities(dt) {\r\n        if (this.static || this.sleeping) {\r\n            return;\r\n        }\r\n        let dx = dt * this.velocity.x, dy = dt * this.velocity.y, dr = dt * this.angularVelocity;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.rotation += dr;\r\n        this.rotation = this.rotation % (Math.PI * 2);\r\n        //位移刚体\r\n        this.translate(dx, dy);\r\n        // 旋转刚体\r\n        if (dr !== 0) {\r\n            this.rotate(dr);\r\n        }\r\n        // 更新标量速度\r\n        let speed = Math.hypot(dx, dy), angularSpeed = Math.abs(dr);\r\n        //更新动量\r\n        this.motion = speed * speed + angularSpeed * angularSpeed;\r\n    }\r\n    /**\r\n     * 请客当前时刻受力\r\n     */\r\n    clearForce() {\r\n        this.force.x = 0;\r\n        this.force.y = 0;\r\n        this.torque = 0;\r\n    }\r\n    // ------------------------------------------------ hook ------------------------------\r\n    /**\r\n     * 绑定沟子事件\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    on(eventName, fn) {\r\n        this.methods[eventName] = fn;\r\n    }\r\n    beforeAppend(engine) {\r\n        this.engine = engine;\r\n        if (this.static) {\r\n            this.sleeping = true;\r\n            this.engine.sleeping.sleep(this);\r\n        }\r\n        this.methods.beforeAppend(this);\r\n    }\r\n    afterAppend() { this.methods.afterAppend(this); }\r\n    beforeRemove() {\r\n        let sleeping = this.engine.sleeping, keys = Object.keys(this.contactBodies), body;\r\n        // 在删除一个刚体前，唤醒与之有碰撞的刚体\r\n        for (let i = 0; i < keys.length; i++) {\r\n            body = this.contactBodies[keys[i]];\r\n            body.sleeping && sleeping.wake(body);\r\n        }\r\n        this.methods.beforeRemove(this);\r\n    }\r\n    afterRemove() { this.methods.afterRemove(this); }\r\n    sleepStart() { this.methods.sleepStart(this); }\r\n    sleepEnd() { this.methods.sleepEnd(this); }\r\n    onCollide(target) {\r\n        this.contactBodies[target.stringId] = target;\r\n        // 触发碰撞钩子\r\n        this.methods.onCollide(this);\r\n    }\r\n}\r\nexports.Body = Body;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Vertices = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst bound_1 = __webpack_require__(5);\r\n// 顶点操作工具\r\nexports.Vertices = {\r\n    /**\r\n     * 获取多边形中心点\r\n     * @param vertexList\r\n     */\r\n    getCenter(vertexList) {\r\n        let range = exports.Vertices.getRange(vertexList), centerX = (range.max.x + range.min.x) / 2, centerY = (range.max.y + range.min.y) / 2;\r\n        return new vector_1.Vector(centerX, centerY);\r\n    },\r\n    /**\r\n     * 获取多边形质心\r\n     * @param vertexList\r\n     */\r\n    getCentroid(vertexList) {\r\n        let area = exports.Vertices.getArea(vertexList), centroid = new vector_1.Vector(0, 0), cross = 0, temp, j;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            j = (i + 1) % vertexList.length;\r\n            cross = vertexList[i].cro(vertexList[j]);\r\n            temp = vertexList[i].add(vertexList[j]).scl(cross);\r\n            centroid.add(temp, centroid);\r\n        }\r\n        return centroid.scl(1 / (6 * area), centroid);\r\n    },\r\n    /**\r\n     * 获取多边形面积\r\n     * @param vertexList\r\n     */\r\n    getArea(vertexList) {\r\n        let area = 0, j = vertexList.length - 1;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            area += (vertexList[j].x - vertexList[i].x) * (vertexList[j].y + vertexList[i].y);\r\n            j = i;\r\n        }\r\n        return area / 2;\r\n    },\r\n    /**\r\n     * 获取多边形的转动惯量\r\n     * 公式来自：https://blog.csdn.net/weixin_34194702/article/details/93587529\r\n     * @param vertexList\r\n     * @param mass 质量\r\n     * @param position\r\n     */\r\n    getInertia(vertexList, mass, position) {\r\n        let numerator = 0, denominator = 0, v = vertexList, cur, next, cross;\r\n        for (let n = 0; n < v.length; n++) {\r\n            cur = v[n].sub(position, cur);\r\n            next = v[(n + 1) % v.length].sub(position, next);\r\n            cross = Math.abs(cur.cro(next));\r\n            numerator += cross * (cur.dot(cur) + cur.dot(next) + next.dot(next));\r\n            denominator += cross;\r\n        }\r\n        return (mass / 6) * (numerator / denominator);\r\n    },\r\n    /**\r\n     * 求三角形的转动惯量\r\n     * @param vertexList\r\n     * @param mass\r\n     * 参考：http://www.doc88.com/p-5456260484135.html\r\n     */\r\n    getTriInertia(vertexList, mass) {\r\n        let l1 = vertexList[0].sub(vertexList[1]).len_s(), l2 = vertexList[1].sub(vertexList[2]).len_s(), l3 = vertexList[2].sub(vertexList[0]).len_s();\r\n        return (l1 + l2 + l3) * (mass / 36);\r\n    },\r\n    /**\r\n     * 求顶点围成的所有面的轴\r\n     * @param vertexList\r\n     */\r\n    getAxes(vertexList) {\r\n        let v = vertexList, axis, axes = [], i, j;\r\n        for (i = 0; i < v.length; i++) {\r\n            j = (i + 1) % v.length;\r\n            axis = v[j].sub(v[i]).nor().nol();\r\n            axes.push({\r\n                value: axis,\r\n                opposite: null,\r\n                origin: vertexList,\r\n                supportVertexIndex: null,\r\n                oppositeVertexIndex: null,\r\n                edge: {\r\n                    index: [i, j],\r\n                    start: v[i],\r\n                    end: v[j]\r\n                }\r\n            });\r\n        }\r\n        return axes;\r\n    },\r\n    /**\r\n     * 获取顶点集的范围\r\n     * @param vertexList\r\n     */\r\n    getRange(vertexList) {\r\n        let xList = vertexList.map(v => v.x), yList = vertexList.map(v => v.y);\r\n        return {\r\n            min: new vector_1.Vector(Math.min.apply(Math, xList), Math.min.apply(Math, yList)),\r\n            max: new vector_1.Vector(Math.max.apply(Math, xList), Math.max.apply(Math, yList))\r\n        };\r\n    },\r\n    /**\r\n     * 获取顶点集形成的包围盒\r\n     * @param vertexList\r\n     */\r\n    getBound(vertexList) {\r\n        let range = exports.Vertices.getRange(vertexList);\r\n        return new bound_1.Bound(range.min, range.max);\r\n    },\r\n    /**\r\n     * 使用斜率筛去共线的轴\r\n     * @param axes 要筛选的轴\r\n     */\r\n    uniqueAxes(axes) {\r\n        let axisVector, tmpAxes = [], axesTable = {}, i, gradient;\r\n        for (i = 0; i < axes.length; i++) {\r\n            axisVector = axes[i].value;\r\n            gradient = (axisVector.y === 0) ? Infinity : (axisVector.x / axisVector.y);\r\n            // 限制精度\r\n            gradient = gradient.toFixed(3).toString();\r\n            axesTable[gradient] = axes[i];\r\n        }\r\n        Object.keys(axesTable).map(item => {\r\n            tmpAxes.push(axesTable[item]);\r\n        });\r\n        return tmpAxes;\r\n    },\r\n    /**\r\n     * 旋转顶点\r\n     * @param vertexList 多边形顶点\r\n     * @param radian 弧度\r\n     * @param point 绕点\r\n     */\r\n    rotate(vertexList, radian, point) {\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            vertexList[i].rot(radian, point, vertexList[i]);\r\n        }\r\n    },\r\n    /**\r\n     * 位移顶点\r\n     * @param vertexList 多边形顶点\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(vertexList, dx, dy) {\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            vertexList[i].x += dx;\r\n            vertexList[i].y += dy;\r\n        }\r\n    },\r\n    /**\r\n     * 将凹多边形分解为多个子凸多边形\r\n     * @param vertexList\r\n     */\r\n    split(vertexList) {\r\n        // 将拆分出来的多边形保存到这个数组\r\n        let parts = [], vertexListA, vertexListB, xAxis, vTest, vDiv, dividePointA, dividePointB, len = vertexList.length, i, j, cur, next, next2, next3, flag = false;\r\n        i++;\r\n        for (i = 0; i < len; i++) {\r\n            cur = i;\r\n            next = (i + 1) % len;\r\n            next2 = (i + 2) % len;\r\n            next3 = (i + 3) % len;\r\n            xAxis = vertexList[next].sub(vertexList[cur]);\r\n            vTest = vertexList[next2].sub(vertexList[cur]);\r\n            j = next3;\r\n            do {\r\n                vDiv = vertexList[j].sub(vertexList[cur]);\r\n                if (xAxis.cro(vDiv) * xAxis.cro(vTest) < 0) {\r\n                    flag = true;\r\n                    break;\r\n                }\r\n                j = (j + 1) % len;\r\n            } while (j !== i);\r\n            if (flag)\r\n                break;\r\n        }\r\n        // 获取两个分割点\r\n        dividePointA = vertexList[next],\r\n            dividePointB = vertexList[j];\r\n        if (j > next2) {\r\n            vertexListB = vertexList.splice(next2, j - next2);\r\n        }\r\n        else {\r\n            vertexListB = [];\r\n            vertexListB.push(...vertexList.splice(next2, len - (next2 - 1)));\r\n            vertexListB.push(...vertexList.splice(0, j));\r\n        }\r\n        // 拆分为两个多边形vertexListA和vertexListB\r\n        vertexListA = vertexList;\r\n        vertexListB.unshift(dividePointA);\r\n        vertexListB.push(dividePointB);\r\n        vertexListA = exports.Vertices.filterCollinearVertex(vertexListA);\r\n        vertexListB = exports.Vertices.filterCollinearVertex(vertexListB);\r\n        // 检测拆分出来的两个多边形是否是凹多边形，若果是，继续递归拆分\r\n        if (vertexListA.length > 3 && exports.Vertices.isConcave(vertexListA)) {\r\n            parts.push(...exports.Vertices.split(vertexListA));\r\n        }\r\n        else {\r\n            parts.push(vertexListA);\r\n        }\r\n        if (vertexListB.length > 3 && exports.Vertices.isConcave(vertexListB)) {\r\n            parts.push(...exports.Vertices.split(vertexListB));\r\n        }\r\n        else {\r\n            parts.push(vertexListB);\r\n        }\r\n        return parts;\r\n    },\r\n    /**\r\n     * 判断是否包含顶点（射线法）\r\n     * 参考：https://www.cnblogs.com/anningwang/p/7581545.html\r\n     * @param vertexList\r\n     * @param point 检测的顶点\r\n     */\r\n    isContains(vertexList, point) {\r\n        let v = vertexList, cur, next, len = vertexList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            cur = v[i], next = v[(i + 1) % len];\r\n            if ((point.x - cur.x) * (next.y - cur.y) + (point.y - cur.y) * (cur.x - next.x) >= 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    /**\r\n     * 判断是否为凹多边形\r\n     * @param vertexList\r\n     */\r\n    isConcave(vertexList) {\r\n        let v = vertexList, \r\n        // 上两向量间的叉积\r\n        prevCor, \r\n        // 当前两向量的叉积\r\n        curCor, \r\n        // 上一顶点到当前顶点的向量\r\n        prev2Cur, \r\n        // 当前顶点到下一顶点的向量\r\n        cur2Next, len = v.length, i, j, k;\r\n        for (i = 1; i < len; i++) {\r\n            j = i - 1;\r\n            k = (i + 1) % len;\r\n            prev2Cur = v[i].sub(v[j]);\r\n            cur2Next = v[k].sub(v[i]);\r\n            // 计算向量叉积\r\n            curCor = prev2Cur.cro(cur2Next) >= 0 ? 1 : -1;\r\n            if (prevCor !== undefined && prevCor !== curCor) {\r\n                return true;\r\n            }\r\n            prevCor = curCor;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * 转换到世界坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2World(point, vertexList) {\r\n        return vertexList.map(v => v.add(point));\r\n    },\r\n    /**\r\n     * 转换到本地坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2Local(point, vertexList) {\r\n        return vertexList.map(v => v.sub(point));\r\n    },\r\n    /**\r\n     * 求多边形在某个轴的投影\r\n     * @param vertexList\r\n     * @param axis 投影轴\r\n     */\r\n    projection(vertexList, axis) {\r\n        let projection, minProjection = Infinity, maxProjection = -Infinity;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            projection = vertexList[i].dot(axis);\r\n            if (projection < minProjection) {\r\n                minProjection = projection;\r\n            }\r\n            if (projection > maxProjection) {\r\n                maxProjection = projection;\r\n            }\r\n        }\r\n        return {\r\n            min: minProjection,\r\n            max: maxProjection\r\n        };\r\n    },\r\n    /**\r\n     * 计算顶点集中离给定点最近的顶点\r\n     * @param point 给定点\r\n     * @param vertexList 顶点集\r\n     */\r\n    getClosestVertex(point, vertexList) {\r\n        let v = vertexList, i, min = Infinity, length, index, len = v.length;\r\n        for (i = 0; i < len; i++) {\r\n            length = v[i].sub(point).len();\r\n            if (length < min) {\r\n                min = length;\r\n                index = i;\r\n            }\r\n        }\r\n        return vertexList[index];\r\n    },\r\n    /**\r\n     * 寻找顶点集中所有凹点\r\n     * @param vertexList\r\n     */\r\n    findCaves(vertexList) {\r\n        let caves = [], v = vertexList, prevVertex, curVertex, nextVertex, len = v.length, i;\r\n        for (i = 1; i < len; i++) {\r\n            prevVertex = v[i - 1];\r\n            curVertex = v[i];\r\n            nextVertex = v[(i + 1) % len];\r\n            // 利用叉乘判断\r\n            if (curVertex.sub(prevVertex).cro(nextVertex.sub(curVertex)) < 0) {\r\n                caves.push(curVertex);\r\n            }\r\n        }\r\n        return caves;\r\n    },\r\n    /**\r\n     * 过滤共线的顶点\r\n     * @param vertexList\r\n     */\r\n    filterCollinearVertex(vertexList) {\r\n        let vertex, next, next2, len = vertexList.length, vNext, vNext2, removeIndex = [], i;\r\n        for (i = 0; i < len; i++) {\r\n            vertex = vertexList[i];\r\n            next = vertexList[(i + 1) % len];\r\n            next2 = vertexList[(i + 2) % len];\r\n            vNext = next.sub(vertex, vector_1._tempVector1);\r\n            vNext2 = next2.sub(vertex, vector_1._tempVector2);\r\n            if (vNext.cro(vNext2) === 0) {\r\n                removeIndex.push((i + 1) % len);\r\n            }\r\n        }\r\n        for (i = 0; i < removeIndex.length; i++) {\r\n            vertexList.splice(removeIndex[i] - i, 1);\r\n        }\r\n        return vertexList;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ContactConstraint = exports.Contact = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst constraint_1 = __webpack_require__(16);\r\nconst util_1 = __webpack_require__(1);\r\n// 接触约束\r\nclass Contact {\r\n    constructor(id, vertex, depth) {\r\n        this.id = id;\r\n        this.position = vertex;\r\n        this.shareNormal = 0;\r\n        this.shareTangent = 0;\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.positionCorrectiveImpulse = 0;\r\n        this.depth = depth;\r\n        this.velocityBias = 0;\r\n    }\r\n    /**\r\n     * 判断两个碰撞点是否相等\r\n     * @param contact\r\n     */\r\n    equal(contact) {\r\n        if (this.id === null || contact.id === null) {\r\n            return false;\r\n        }\r\n        if (this.id === contact.id) {\r\n            return true;\r\n        }\r\n        if (this.id[0] === contact.id[0] && this.id[1] === contact.id[1]) {\r\n            return true;\r\n        }\r\n        if (this.id[0] === contact.id[1] && this.id[1] === contact.id[0]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.Contact = Contact;\r\n/**\r\n * 碰撞求解器\r\n */\r\nclass ContactConstraint extends constraint_1.Constraint {\r\n    constructor() {\r\n        super();\r\n        this.velocitySolverIterations = 20;\r\n        this.positionSolverIterations = 1;\r\n        this.slop = 0.01;\r\n        this.biasFactor = 0.2;\r\n        this.restFactor = 24;\r\n    }\r\n    static create(id, vertex, depth) {\r\n        return new Contact(id, vertex, depth);\r\n    }\r\n    solve(manifolds, dt) {\r\n        this.initSolver(manifolds, dt);\r\n        for (let i = 0; i < this.positionSolverIterations; i++) {\r\n            this.solvePosition(manifolds);\r\n        }\r\n        this.preSolveVelocity(manifolds);\r\n        for (let i = 0; i < this.velocitySolverIterations; i++) {\r\n            this.solveVelocity(manifolds);\r\n        }\r\n    }\r\n    initSolver(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, i, j;\r\n        for (i = 0; i < manifolds.length; ++i) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                // 接触点到刚体A质心的距离\r\n                contact.offsetA = contact.position.sub(bodyA.position);\r\n                // 接触点到刚体B质心的距离\r\n                contact.offsetB = contact.position.sub(bodyB.position);\r\n                let invMassNormal = manifold.inverseMass, invMassTangent = manifold.inverseMass, r1 = contact.offsetA, r2 = contact.offsetB, rn1 = contact.offsetA.dot(normal), rn2 = contact.offsetB.dot(normal), rt1 = contact.offsetA.dot(tangent), rt2 = contact.offsetB.dot(tangent);\r\n                // 计算 J(M^-1)(J^T).\r\n                invMassNormal += bodyA.invInertia * (r1.dot(r1) - rn1 * rn1);\r\n                invMassNormal += bodyB.invInertia * (r2.dot(r2) - rn2 * rn2);\r\n                invMassTangent += bodyA.invInertia * (r1.dot(r1) - rt1 * rt1);\r\n                invMassTangent += bodyB.invInertia * (r2.dot(r2) - rt2 * rt2);\r\n                let bias = (1 / dt) * Math.max(0, contact.depth - this.slop);\r\n                // 保存 J(M^-1)(J^T)的倒数\r\n                contact.shareNormal = 1 / invMassNormal;\r\n                contact.shareTangent = 1 / invMassTangent;\r\n                contact.velocityBias = this.biasFactor * bias;\r\n                contact.positionCorrectiveImpulse = contact.velocityBias * manifold.restitution / invMassNormal;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 修正位置约束\r\n     * @param manifolds\r\n     */\r\n    solvePosition(manifolds) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, i, j;\r\n        for (i = 0; i < manifolds.length; ++i) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                let positionCorrectiveImpulse = normal.scl(contact.positionCorrectiveImpulse, vector_1._tempVector4);\r\n                bodyA.applyImpulse(positionCorrectiveImpulse, contact.offsetA);\r\n                bodyB.applyImpulse(positionCorrectiveImpulse.inv(positionCorrectiveImpulse), contact.offsetB);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 求解速度约束预处理\r\n     * @param manifolds 碰撞流形\r\n     * @param dt 步长\r\n     */\r\n    preSolveVelocity(manifolds) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, i, j;\r\n        for (i = 0; i < manifolds.length; ++i) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                // warm start\r\n                if (contact.normalImpulse !== 0 || contact.tangentImpulse !== 0) {\r\n                    let p = vector_1._tempVector3;\r\n                    p.x = normal.x * contact.normalImpulse + tangent.x * contact.tangentImpulse;\r\n                    p.y = normal.y * contact.normalImpulse + tangent.y * contact.tangentImpulse;\r\n                    bodyA.applyImpulse(p, contact.offsetA);\r\n                    bodyB.applyImpulse(p.inv(p), contact.offsetB);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 求解速度约束\r\n     * 使用sequential impulse进行快速收敛\r\n     * 参考：https://kevinyu.net/2018/01/17/understanding-constraint-solver-in-physics-engine/\r\n     * @param manifolds\r\n     * @private dt\r\n     */\r\n    solveVelocity(manifolds) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, normalImpulse, tangentImpulse, maxFriction, velocityPointA, // 刚体A质心相对碰撞点的速度\r\n        velocityPointB, // 刚体B质心相对碰撞点的速度\r\n        relativeVelocity, // 相对速度\r\n        relativeNormalVelocity, relativeTangentVelocity, impulse = vector_1._tempVector3, i, j;\r\n        for (i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算法向相对速度\r\n                relativeNormalVelocity = normal.dot(relativeVelocity);\r\n                // 计算法向冲量\r\n                normalImpulse = (relativeNormalVelocity + contact.velocityBias) * contact.shareNormal;\r\n                let frictionNormalImpulse = contact.normalImpulse;\r\n                if (collision.isReuse && relativeNormalVelocity < 0 && relativeNormalVelocity ** 2 > this.restFactor) {\r\n                    contact.normalImpulse = 0;\r\n                }\r\n                else {\r\n                    // sequential impulse方法，收敛法向冲量\r\n                    let oldNormalImpulse = contact.normalImpulse;\r\n                    contact.normalImpulse = Math.max(oldNormalImpulse + normalImpulse, 0);\r\n                    normalImpulse = contact.normalImpulse - oldNormalImpulse;\r\n                }\r\n                frictionNormalImpulse += normalImpulse;\r\n                // 应用冲量\r\n                impulse.x = normal.x * normalImpulse;\r\n                impulse.y = normal.y * normalImpulse;\r\n                bodyA.applyImpulse(impulse, contact.offsetA);\r\n                bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB);\r\n                // --------------------------------------------------------------------------------------------\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算切向相对速度\r\n                relativeTangentVelocity = tangent.dot(relativeVelocity);\r\n                // 计算切向冲量\r\n                tangentImpulse = relativeTangentVelocity * contact.shareTangent;\r\n                // 计算最大摩擦力\r\n                maxFriction = manifold.friction * frictionNormalImpulse;\r\n                // sequential impulse方法，收敛切向冲量\r\n                let oldTangentImpulse = contact.tangentImpulse;\r\n                contact.tangentImpulse = util_1.Util.clamp(oldTangentImpulse + tangentImpulse, -maxFriction, maxFriction);\r\n                tangentImpulse = contact.tangentImpulse - oldTangentImpulse;\r\n                // 应用冲量\r\n                impulse.x = tangent.x * tangentImpulse;\r\n                impulse.y = tangent.y * tangentImpulse;\r\n                bodyA.applyImpulse(impulse, contact.offsetA);\r\n                bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ContactConstraint = ContactConstraint;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Bound = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst vertices_1 = __webpack_require__(3);\r\n// AABB包围盒（速度扩展的）\r\nclass Bound {\r\n    constructor(min, max) {\r\n        this.min = new vector_1.Vector(0, 0);\r\n        this.max = new vector_1.Vector(0, 0);\r\n        this.set(min, max);\r\n    }\r\n    /**\r\n     * 设置包围盒范围\r\n     *\r\n     *  min ----------|\r\n     *   |            |\r\n     *   |            |\r\n     *   | --------- max\r\n     *\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    set(min, max) {\r\n        this.min.x = min.x;\r\n        this.min.y = min.y;\r\n        this.max.x = max.x;\r\n        this.max.y = max.y;\r\n    }\r\n    /**\r\n     * 位移包围盒\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(dx, dy) {\r\n        this.min.x += dx;\r\n        this.min.y += dy;\r\n        this.max.x += dx;\r\n        this.max.y += dy;\r\n    }\r\n    /**\r\n     * 更新包围盒（通常发生在刚体发生旋转，min和max都要重新计算）\r\n     * @param vertexList\r\n     */\r\n    update(vertexList) {\r\n        let range = vertices_1.Vertices.getRange(vertexList);\r\n        this.min.x = range.min.x;\r\n        this.min.y = range.min.y;\r\n        this.max.x = range.max.x;\r\n        this.max.y = range.max.y;\r\n    }\r\n    /**\r\n     * 根据子包围盒更新包围盒\r\n     * @param bodies\r\n     */\r\n    updateByBounds(bodies) {\r\n        let bound, maxX = -Infinity, maxY = -Infinity, minX = Infinity, minY = Infinity;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            bound = bodies[i].bound;\r\n            if (bound.min.x < minX) {\r\n                minX = bound.min.x;\r\n            }\r\n            if (bound.min.y < minY) {\r\n                minY = bound.min.y;\r\n            }\r\n            if (bound.max.x > maxX) {\r\n                maxX = bound.max.x;\r\n            }\r\n            if (bound.max.y > maxY) {\r\n                maxY = bound.max.y;\r\n            }\r\n        }\r\n        this.min.x = minX;\r\n        this.min.y = minY;\r\n        this.max.x = maxX;\r\n        this.max.y = maxY;\r\n    }\r\n    /**\r\n     * 两包围盒求交集\r\n     * @param b\r\n     */\r\n    intersect(b) {\r\n        let x, y, maxX, maxY, overlapsX, overlapsY;\r\n        x = Math.max(this.min.x, b.min.x);\r\n        maxX = Math.min(this.max.x, b.max.x);\r\n        y = Math.max(this.min.y, b.min.y);\r\n        maxY = Math.min(this.max.y, b.max.y);\r\n        overlapsX = maxX - x;\r\n        overlapsY = maxY - y;\r\n        if (overlapsX < 0 || overlapsY < 0)\r\n            return null;\r\n        vector_1._tempVector1.x = x;\r\n        vector_1._tempVector1.y = y;\r\n        vector_1._tempVector2.x = x + overlapsX;\r\n        vector_1._tempVector2.y = y + overlapsY;\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 求多个包围盒的并集\r\n     * @param arg\r\n     */\r\n    union(bound) {\r\n        let min = vector_1._tempVector1, max = vector_1._tempVector2;\r\n        min.x = Math.min(this.min.x, bound.min.x);\r\n        min.y = Math.min(this.min.y, bound.min.y);\r\n        max.x = Math.max(this.max.x, bound.max.x);\r\n        max.y = Math.max(this.max.y, bound.max.y);\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 判断与另一个包围盒是否相交\r\n     * @param bound\r\n     */\r\n    isIntersect(bound) {\r\n        return (this.min.x <= bound.max.x && this.max.x >= bound.min.x) && (this.min.y <= bound.max.y && bound.min.y <= this.max.y);\r\n    }\r\n    /**\r\n     * 求一个包围盒是否包含另一个包围盒\r\n     * @param bound\r\n     */\r\n    isContains(bound) {\r\n        return this.min.x <= bound.min.x &&\r\n            this.min.y <= bound.min.y &&\r\n            this.max.x >= bound.max.x &&\r\n            this.max.y >= bound.max.y;\r\n    }\r\n    /**\r\n     * 查看点是否在包围盒中\r\n     * @param point\r\n     */\r\n    contains(point) {\r\n        return point.x >= this.min.x &&\r\n            point.x <= this.max.x &&\r\n            point.y >= this.min.y &&\r\n            point.y <= this.max.y;\r\n    }\r\n}\r\nexports.Bound = Bound;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2JvdW5kLnRzPzk4YTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQW9FO0FBQ3BFLDBDQUFrRDtBQU9sRCxpQkFBaUI7QUFDakIsTUFBYSxLQUFLO0lBSWQsWUFBWSxHQUFXLEVBQUUsR0FBVztRQUNoQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBVztRQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxDQUFDLEVBQVUsRUFBRSxFQUFVO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFVBQXNCO1FBQ3pCLElBQUksS0FBSyxHQUFHLG1CQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxjQUFjLENBQUMsTUFBYztRQUN6QixJQUFJLEtBQVksRUFDWixJQUFJLEdBQVcsQ0FBQyxRQUFRLEVBQ3hCLElBQUksR0FBVyxDQUFDLFFBQVEsRUFDeEIsSUFBSSxHQUFXLFFBQVEsRUFDdkIsSUFBSSxHQUFXLFFBQVEsQ0FBQztRQUU1QixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUV4QixJQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDbkIsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3RCO1lBRUQsSUFBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUU7Z0JBQ25CLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN0QjtZQUVELElBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFO2dCQUNuQixJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDdEI7WUFFRCxJQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDbkIsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3RCO1NBQ0o7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsQ0FBQyxDQUFRO1FBQ2QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUNKLElBQUksRUFBRSxJQUFJLEVBQ1YsU0FBUyxFQUNULFNBQVMsQ0FBQztRQUVkLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckMsU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7UUFDckIsU0FBUyxHQUFHLElB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ZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IsIF90ZW1wVmVjdG9yMSwgX3RlbXBWZWN0b3IyIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IFZlcnRleExpc3QsIFZlcnRpY2VzIH0gZnJvbSBcIi4vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyBBQUJC5YyF5Zu055uS77yI6YCf5bqm5omp5bGV55qE77yJXHJcbmV4cG9ydCBjbGFzcyBCb3VuZCB7XHJcbiAgICBtaW46IFZlY3RvcjtcclxuICAgIG1heDogVmVjdG9yO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1pbjogVmVjdG9yLCBtYXg6IFZlY3Rvcikge1xyXG4gICAgICAgIHRoaXMubWluID0gbmV3IFZlY3RvcigwLCAwKTtcclxuICAgICAgICB0aGlzLm1heCA9IG5ldyBWZWN0b3IoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5zZXQobWluLCBtYXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5YyF5Zu055uS6IyD5Zu0XHJcbiAgICAgKiBcclxuICAgICAqICBtaW4gLS0tLS0tLS0tLXxcclxuICAgICAqICAgfCAgICAgICAgICAgIHxcclxuICAgICAqICAgfCAgICAgICAgICAgIHxcclxuICAgICAqICAgfCAtLS0tLS0tLS0gbWF4XHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtaW4g5pyA5bCP5YC8XHJcbiAgICAgKiBAcGFyYW0gbWF4IOacgOWkp+WAvFxyXG4gICAgICovXHJcbiAgICBzZXQobWluOiBWZWN0b3IsIG1heDogVmVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5taW4ueCA9IG1pbi54O1xyXG4gICAgICAgIHRoaXMubWluLnkgPSBtaW4ueTtcclxuICAgICAgICB0aGlzLm1heC54ID0gbWF4Lng7XHJcbiAgICAgICAgdGhpcy5tYXgueSA9IG1heC55O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5L2N56e75YyF5Zu055uSXHJcbiAgICAgKiBAcGFyYW0gZHhcclxuICAgICAqIEBwYXJhbSBkeVxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUoZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubWluLnggKz0gZHg7XHJcbiAgICAgICAgdGhpcy5taW4ueSArPSBkeTtcclxuICAgICAgICB0aGlzLm1heC54ICs9IGR4O1xyXG4gICAgICAgIHRoaXMubWF4LnkgKz0gZHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDljIXlm7Tnm5LvvIjpgJrluLjlj5HnlJ/lnKjliJrkvZPlj5HnlJ/ml4vovazvvIxtaW7lkoxtYXjpg73opoHph43mlrDorqHnrpfvvIlcclxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhMaXN0IFxyXG4gICAgICovXHJcbiAgICB1cGRhdGUodmVydGV4TGlzdDogVmVydGV4TGlzdCkge1xyXG4gICAgICAgIGxldCByYW5nZSA9IFZlcnRpY2VzLmdldFJhbmdlKHZlcnRleExpc3QpO1xyXG5cclxuICAgICAgICB0aGlzLm1pbi54ID0gcmFuZ2UubWluLng7XHJcbiAgICAgICAgdGhpcy5taW4ueSA9IHJhbmdlLm1pbi55O1xyXG4gICAgICAgIHRoaXMubWF4LnggPSByYW5nZS5tYXgueDtcclxuICAgICAgICB0aGlzLm1heC55ID0gcmFuZ2UubWF4Lnk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7lrZDljIXlm7Tnm5Lmm7TmlrDljIXlm7Tnm5JcclxuICAgICAqIEBwYXJhbSBib2RpZXNcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQnlCb3VuZHMoYm9kaWVzOiBCb2R5W10pIHtcclxuICAgICAgICBsZXQgYm91bmQ6IEJvdW5kLFxyXG4gICAgICAgICAgICBtYXhYOiBudW1iZXIgPSAtSW5maW5pdHksIFxyXG4gICAgICAgICAgICBtYXhZOiBudW1iZXIgPSAtSW5maW5pdHksXHJcbiAgICAgICAgICAgIG1pblg6IG51bWJlciA9IEluZmluaXR5LFxyXG4gICAgICAgICAgICBtaW5ZOiBudW1iZXIgPSBJbmZpbml0eTsgXHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYm91bmQgPSBib2RpZXNbaV0uYm91bmQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihib3VuZC5taW4ueCA8IG1pblgpIHtcclxuICAgICAgICAgICAgICAgIG1pblggPSBib3VuZC5taW4ueDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoYm91bmQubWluLnkgPCBtaW5ZKSB7XHJcbiAgICAgICAgICAgICAgICBtaW5ZID0gYm91bmQubWluLnk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGJvdW5kLm1heC54ID4gbWF4WCkge1xyXG4gICAgICAgICAgICAgICAgbWF4WCA9IGJvdW5kLm1heC54O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihib3VuZC5tYXgueSA+IG1heFkpIHtcclxuICAgICAgICAgICAgICAgIG1heFkgPSBib3VuZC5tYXgueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5taW4ueCA9IG1pblg7XHJcbiAgICAgICAgdGhpcy5taW4ueSA9IG1pblk7XHJcbiAgICAgICAgdGhpcy5tYXgueCA9IG1heFg7XHJcbiAgICAgICAgdGhpcy5tYXgueSA9IG1heFk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuKTljIXlm7Tnm5LmsYLkuqTpm4ZcclxuICAgICAqIEBwYXJhbSBiIFxyXG4gICAgICovXHJcbiAgICBpbnRlcnNlY3QoYjogQm91bmQpOiBCb3VuZCB7XHJcbiAgICAgICAgbGV0IHgsIHksIFxyXG4gICAgICAgICAgICBtYXhYLCBtYXhZLFxyXG4gICAgICAgICAgICBvdmVybGFwc1gsXHJcbiAgICAgICAgICAgIG92ZXJsYXBzWTtcclxuXHJcbiAgICAgICAgeCA9IE1hdGgubWF4KHRoaXMubWluLngsIGIubWluLngpO1xyXG4gICAgICAgIG1heFggPSBNYXRoLm1pbih0aGlzLm1heC54LCBiLm1heC54KTtcclxuICAgICAgICBcclxuICAgICAgICB5ID0gTWF0aC5tYXgodGhpcy5taW4ueSwgYi5taW4ueSk7XHJcbiAgICAgICAgbWF4WSA9IE1hdGgubWluKHRoaXMubWF4LnksIGIubWF4LnkpO1xyXG5cclxuICAgICAgICBvdmVybGFwc1ggPSBtYXhYIC0geDtcclxuICAgICAgICBvdmVybGFwc1kgPSBtYXhZIC0geTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgaWYob3ZlcmxhcHNYIDwgMCB8fCBvdmVybGFwc1kgPCAwKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgX3RlbXBWZWN0b3IxLnggPSB4O1xyXG4gICAgICAgIF90ZW1wVmVjdG9yMS55ID0geTtcclxuICAgICAgICBfdGVtcFZlY3RvcjIueCA9IHggKyBvdmVybGFwc1g7XHJcbiAgICAgICAgX3RlbXBWZWN0b3IyLnkgPSB5ICsgb3ZlcmxhcHNZO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEJvdW5kKF90ZW1wVmVjdG9yMSwgX3RlbXBWZWN0b3IyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaxguWkmuS4quWMheWbtOebkueahOW5tumbhlxyXG4gICAgICogQHBhcmFtIGFyZyBcclxuICAgICAqL1xyXG4gICAgdW5pb24oYm91bmQ6IEJvdW5kKTogQm91bmQge1xyXG4gICAgICAgIGxldCBtaW46IFZlY3RvciA9IF90ZW1wVmVjdG9yMSxcclxuICAgICAgICAgICAgbWF4OiBWZWN0b3IgPSBfdGVtcFZlY3RvcjI7XHJcblxyXG4gICAgICAgIG1pbi54ID0gTWF0aC5taW4odGhpcy5taW4ueCwgYm91bmQubWluLngpO1xyXG4gICAgICAgIG1pbi55ID0gTWF0aC5taW4odGhpcy5taW4ueSwgYm91bmQubWluLnkpO1xyXG4gICAgICAgIG1heC54ID0gTWF0aC5tYXgodGhpcy5tYXgueCwgYm91bmQubWF4LngpO1xyXG4gICAgICAgIG1heC55ID0gTWF0aC5tYXgodGhpcy5tYXgueSwgYm91bmQubWF4LnkpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEJvdW5kKF90ZW1wVmVjdG9yMSwgX3RlbXBWZWN0b3IyKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3kuI7lj6bkuIDkuKrljIXlm7Tnm5LmmK/lkKbnm7jkuqRcclxuICAgICAqIEBwYXJhbSBib3VuZCBcclxuICAgICAqL1xyXG4gICAgaXNJbnRlcnNlY3QoYm91bmQ6IEJvdW5kKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLm1pbi54IDw9IGJvdW5kLm1heC54ICYmIHRoaXMubWF4LnggPj0gYm91bmQubWluLngpICYmICh0aGlzLm1pbi55IDw9IGJvdW5kLm1heC55ICYmIGJvdW5kLm1pbi55IDw9IHRoaXMubWF4LnkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rGC5LiA5Liq5YyF5Zu055uS5piv5ZCm5YyF5ZCr5Y+m5LiA5Liq5YyF5Zu055uSXHJcbiAgICAgKiBAcGFyYW0gYm91bmQgXHJcbiAgICAgKi9cclxuICAgIGlzQ29udGFpbnMoYm91bmQ6IEJvdW5kKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWluLnggPD0gYm91bmQubWluLnggJiZcclxuICAgICAgICAgICAgICAgdGhpcy5taW4ueSA8PSBib3VuZC5taW4ueSAmJlxyXG4gICAgICAgICAgICAgICB0aGlzLm1heC54ID49IGJvdW5kLm1heC54ICYmXHJcbiAgICAgICAgICAgICAgIHRoaXMubWF4LnkgPj0gYm91bmQubWF4Lnk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvngrnmmK/lkKblnKjljIXlm7Tnm5LkuK1cclxuICAgICAqIEBwYXJhbSBwb2ludCBcclxuICAgICAqL1xyXG4gICAgY29udGFpbnMocG9pbnQ6IFZlY3Rvcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBwb2ludC54ID49IHRoaXMubWluLnggJiYgXHJcbiAgICAgICAgICAgICAgIHBvaW50LnggPD0gdGhpcy5tYXgueCAmJiBcclxuICAgICAgICAgICAgICAgcG9pbnQueSA+PSB0aGlzLm1pbi55ICYmIFxyXG4gICAgICAgICAgICAgICBwb2ludC55IDw9IHRoaXMubWF4Lnk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Arcs = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst vertices_1 = __webpack_require__(3);\r\nconst bound_1 = __webpack_require__(5);\r\nconst _tempDynamicAxis = {\r\n    value: null,\r\n    opposite: null,\r\n    origin: null,\r\n    supportVertexIndex: null,\r\n    oppositeVertexIndex: null,\r\n    edge: null\r\n};\r\nexports.Arcs = {\r\n    /**\r\n     * 获取两个圆的圆心间的距离\r\n     * @param circleA\r\n     * @param circleB\r\n     */\r\n    distance(circleA, circleB) {\r\n        return circleA.position.sub(circleB.position).len();\r\n    },\r\n    /**\r\n     * 获取圆形和顶点集间的轴\r\n     * @param vertices 顶点信息\r\n     */\r\n    getAxes(circle, poly) {\r\n        let closestVertex = vertices_1.Vertices.getClosestVertex(circle.position, poly.vertexList);\r\n        _tempDynamicAxis.value = closestVertex.sub(circle.position).nol();\r\n        return _tempDynamicAxis;\r\n    },\r\n    getBound(centroid, radius) {\r\n        let min = new vector_1.Vector(centroid.x - radius, centroid.y - radius), max = new vector_1.Vector(centroid.x + radius, centroid.y + radius);\r\n        return new bound_1.Bound(min, max);\r\n    },\r\n    /**\r\n     * 获取圆形在给定轴上的投影\r\n     * @param axis\r\n     */\r\n    projection(circle, axis) {\r\n        let len = circle.position.pro(axis);\r\n        return {\r\n            min: len - circle.radius,\r\n            max: len + circle.radius\r\n        };\r\n    },\r\n    /**\r\n     * 查看圆形是否包含某个点\r\n     * @param circle\r\n     * @param point\r\n     */\r\n    isContains(circle, point) {\r\n        return circle.radius - Math.hypot(point.x - circle.position.x, point.y - circle.position.y) > 0;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FyY3MudHM/MjcyZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBd0M7QUFFeEMsMENBQTRDO0FBQzVDLHVDQUFnQztBQUloQyxNQUFNLGdCQUFnQixHQUFTO0lBQzNCLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsSUFBSTtJQUNaLGtCQUFrQixFQUFFLElBQUk7SUFDeEIsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QixJQUFJLEVBQUUsSUFBSTtDQUNiLENBQUM7QUFLVyxZQUFJLEdBQUc7SUFFaEI7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxPQUFlLEVBQUUsT0FBZTtRQUNyQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsT0FBTyxDQUFDLE1BQWMsRUFBRSxJQUFhO1FBQ2pDLElBQUksYUFBYSxHQUFHLG1CQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEYsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxFLE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFnQixFQUFFLE1BQWM7UUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxlQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFDMUQsR0FBRyxHQUFHLElBQUksZUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFL0QsT0FBTyxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxNQUFjLEVBQUUsSUFBWTtRQUNuQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQyxPQUFPO1lBQ0gsR0FBRyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTTtZQUN4QixHQUFHLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNO1NBQzNCLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFVBQVUsQ0FBQyxNQUFjLEVBQUUsS0FBYTtRQUNwQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEcsQ0FBQztDQUNKLENBQUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tIFwiLi4vYm9keS9jaXJjbGVcIjtcclxuaW1wb3J0IHsgQXhpcywgVmVydGljZXMgfSBmcm9tIFwiLi92ZXJ0aWNlc1wiO1xyXG5pbXBvcnQgeyBCb3VuZCB9IGZyb20gXCIuL2JvdW5kXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi4vYm9keS9wb2x5Z29uXCI7XHJcblxyXG5cclxuY29uc3QgX3RlbXBEeW5hbWljQXhpczogQXhpcyA9IHtcclxuICAgIHZhbHVlOiBudWxsLFxyXG4gICAgb3Bwb3NpdGU6IG51bGwsXHJcbiAgICBvcmlnaW46IG51bGwsXHJcbiAgICBzdXBwb3J0VmVydGV4SW5kZXg6IG51bGwsXHJcbiAgICBvcHBvc2l0ZVZlcnRleEluZGV4OiBudWxsLFxyXG4gICAgZWRnZTogbnVsbFxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IEFyY3MgPSB7XHJcbiBcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5Lik5Liq5ZyG55qE5ZyG5b+D6Ze055qE6Led56a7XHJcbiAgICAgKiBAcGFyYW0gY2lyY2xlQSBcclxuICAgICAqIEBwYXJhbSBjaXJjbGVCIFxyXG4gICAgICovXHJcbiAgICBkaXN0YW5jZShjaXJjbGVBOiBDaXJjbGUsIGNpcmNsZUI6IENpcmNsZSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIGNpcmNsZUEucG9zaXRpb24uc3ViKGNpcmNsZUIucG9zaXRpb24pLmxlbigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWchuW9ouWSjOmhtueCuembhumXtOeahOi9tFxyXG4gICAgICogQHBhcmFtIHZlcnRpY2VzIOmhtueCueS/oeaBr1xyXG4gICAgICovXHJcbiAgICBnZXRBeGVzKGNpcmNsZTogQ2lyY2xlLCBwb2x5OiBQb2x5Z29uKTogQXhpcyB7XHJcbiAgICAgICAgbGV0IGNsb3Nlc3RWZXJ0ZXggPSBWZXJ0aWNlcy5nZXRDbG9zZXN0VmVydGV4KGNpcmNsZS5wb3NpdGlvbiwgcG9seS52ZXJ0ZXhMaXN0KTtcclxuXHJcbiAgICAgICAgX3RlbXBEeW5hbWljQXhpcy52YWx1ZSA9IGNsb3Nlc3RWZXJ0ZXguc3ViKGNpcmNsZS5wb3NpdGlvbikubm9sKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBfdGVtcER5bmFtaWNBeGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRCb3VuZChjZW50cm9pZDogVmVjdG9yLCByYWRpdXM6IG51bWJlcik6IEJvdW5kIHtcclxuICAgICAgICBsZXQgbWluID0gbmV3IFZlY3RvcihjZW50cm9pZC54IC0gcmFkaXVzLCBjZW50cm9pZC55IC0gcmFkaXVzKSxcclxuICAgICAgICAgICAgbWF4ID0gbmV3IFZlY3RvcihjZW50cm9pZC54ICsgcmFkaXVzLCBjZW50cm9pZC55ICsgcmFkaXVzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBCb3VuZChtaW4sIG1heCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5ZyG5b2i5Zyo57uZ5a6a6L205LiK55qE5oqV5b2xXHJcbiAgICAgKiBAcGFyYW0gYXhpcyBcclxuICAgICAqL1xyXG4gICAgcHJvamVjdGlvbihjaXJjbGU6IENpcmNsZSwgYXhpczogVmVjdG9yKToge21pbjogbnVtYmVyLCBtYXg6IG51bWJlcn0ge1xyXG4gICAgICAgIGxldCBsZW4gPSBjaXJjbGUucG9zaXRpb24ucHJvKGF4aXMpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtaW46IGxlbiAtIGNpcmNsZS5yYWRpdXMsXHJcbiAgICAgICAgICAgIG1heDogbGVuICsgY2lyY2xlLnJhZGl1c1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p+l55yL5ZyG5b2i5piv5ZCm5YyF5ZCr5p+Q5Liq54K5XHJcbiAgICAgKiBAcGFyYW0gY2lyY2xlIFxyXG4gICAgICogQHBhcmFtIHBvaW50IFxyXG4gICAgICovXHJcbiAgICBpc0NvbnRhaW5zKGNpcmNsZTogQ2lyY2xlLCBwb2ludDogVmVjdG9yKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGNpcmNsZS5yYWRpdXMgLSBNYXRoLmh5cG90KHBvaW50LnggLSBjaXJjbGUucG9zaXRpb24ueCwgcG9pbnQueSAtIGNpcmNsZS5wb3NpdGlvbi55KSA+IDA7IFxyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Manifold = exports.Collision = void 0;\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 一个碰撞结构，包含了碰撞的所有信息\r\n */\r\nclass Collision {\r\n    constructor() {\r\n        // 分离轴\r\n        this.axis = {\r\n            value: null,\r\n            oppositeVertexIndex: null,\r\n            supportVertexIndex: null,\r\n            opposite: null,\r\n            origin: null,\r\n            edge: null\r\n        };\r\n        // 是否发生了碰撞\r\n        this.collide = false;\r\n        // 该碰撞是否是复用状态\r\n        this.isReuse = false;\r\n    }\r\n}\r\nexports.Collision = Collision;\r\n;\r\n/**\r\n * 碰撞流形\r\n * 主要用于记录相互碰撞的刚体和进行碰撞缓存\r\n */\r\nclass Manifold {\r\n    constructor(collision, timeStamp) {\r\n        this.bodyA = collision.bodyA;\r\n        this.bodyB = collision.bodyB;\r\n        this.partA = collision.partA;\r\n        this.partB = collision.partB;\r\n        this.id = util_1.Util.compositeId(this.partA.id, this.partB.id);\r\n        this.collision = collision;\r\n        this.isActive = true;\r\n        this.confirmedActive = true;\r\n        this.timeCreated = timeStamp;\r\n        this.timeUpdated = timeStamp;\r\n        this.friction = 0;\r\n        this.restitution = 0;\r\n        this.inverseMass = 0;\r\n        this.update(collision, timeStamp);\r\n    }\r\n    /**\r\n     * 更新流形\r\n     * @param collision 碰撞信息\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(collision, timeStamp) {\r\n        // 如果该碰撞对真的发生了碰撞\r\n        if (collision.collide) {\r\n            let bodyA, bodyB;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            this.friction = Math.sqrt(bodyA.friction * bodyB.friction);\r\n            this.restitution = (bodyA.restitution + bodyB.restitution) / 2;\r\n            this.inverseMass = bodyA.invMass + bodyB.invMass;\r\n            this.warmStart(collision);\r\n            this.toggleActive(true, timeStamp);\r\n        }\r\n        // 否则\r\n        else {\r\n            this.isActive && this.toggleActive(false, timeStamp);\r\n        }\r\n        this.collision = collision;\r\n    }\r\n    /**\r\n     * 更改流形激活状态\r\n     * @param active 激活状态\r\n     * @param timeStamp 时间戳\r\n     */\r\n    toggleActive(active, timeStamp) {\r\n        this.isActive = active;\r\n        if (active) {\r\n            this.timeUpdated = timeStamp;\r\n        }\r\n    }\r\n    /**\r\n     * 热启动\r\n     * @param collision\r\n     */\r\n    warmStart(collision) {\r\n        let oldContacts = collision.prevContacts || this.collision.contacts, newContacts = collision.contacts;\r\n        for (let i = 0; i < newContacts.length; i++) {\r\n            for (let j = 0; j < oldContacts.length; j++) {\r\n                if (newContacts[i].equal(oldContacts[j])) {\r\n                    newContacts[i].normalImpulse = oldContacts[j].normalImpulse;\r\n                    newContacts[i].tangentImpulse = oldContacts[j].tangentImpulse;\r\n                }\r\n            }\r\n        }\r\n        collision.prevContacts = newContacts;\r\n    }\r\n}\r\nexports.Manifold = Manifold;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Circle = void 0;\r\nconst body_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(0);\r\nconst arcs_1 = __webpack_require__(6);\r\nclass Circle extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.circle);\r\n    }\r\n    getArea() {\r\n        return Math.PI * this.radius * this.radius;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.col();\r\n    }\r\n    getInertia(position) {\r\n        return 0.5 * this.mass * Math.pow(this.radius, 2);\r\n    }\r\n    getBound() {\r\n        return arcs_1.Arcs.getBound(this.position, this.radius);\r\n    }\r\n    translate(dx, dy) {\r\n        // 位移图形原点\r\n        this.origin.x += dx;\r\n        this.origin.y += dy;\r\n        // 位移包围盒\r\n        this.bound.translate(dx, dy);\r\n    }\r\n    rotate(radian) {\r\n        if (this.rotateCenter === this.position)\r\n            return;\r\n        let ox = this.origin.x, oy = this.origin.y;\r\n        this.origin = this.origin.rot(radian, this.rotateCenter, this.origin);\r\n        this.bound.translate(this.origin.x - ox, this.origin.y - oy);\r\n    }\r\n    isContains(x, y) {\r\n        return arcs_1.Arcs.isContains(this, new vector_1.Vector(x, y));\r\n    }\r\n}\r\nexports.Circle = Circle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9jaXJjbGUudHM/NWFiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBaUQ7QUFDakQsd0NBQXdDO0FBQ3hDLHNDQUFzQztBQWF0QyxNQUFhLE1BQU8sU0FBUSxXQUFJO0lBSTVCLFlBQVksR0FBYztRQUN0QixLQUFLLENBQUMsR0FBRyxFQUFFLGVBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFpQjtRQUN4QixPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsUUFBUTtRQUNKLE9BQU8sV0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsU0FBUyxDQUFDLEVBQVUsRUFBRSxFQUFVO1FBQzVCLFNBQVM7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXBCLFFBQVE7UUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFjO1FBQ2pCLElBQUcsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFFL0MsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUMzQixPQUFPLFdBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Q0FDSjtBQTlDRCx3QkE4Q0MiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIEJvZHlPcHQsIGJvZHlUeXBlIH0gZnJvbSBcIi4vYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgQXJjcyB9IGZyb20gXCIuLi9jb21tb24vYXJjc1wiO1xyXG5pbXBvcnQgeyBCb3VuZCB9IGZyb20gXCIuLi9jb21tb24vYm91bmRcIjtcclxuXHJcbi8qKlxyXG4gKiDlnIblvaLliJrkvZNcclxuICovXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaXJjbGVPcHQgZXh0ZW5kcyBCb2R5T3B0IHtcclxuICAgIHJhZGl1czogbnVtYmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENpcmNsZSBleHRlbmRzIEJvZHkge1xyXG4gICAgLy8g5Y2K5b6EXHJcbiAgICByYWRpdXM6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IENpcmNsZU9wdCkge1xyXG4gICAgICAgIHN1cGVyKG9wdCwgYm9keVR5cGUuY2lyY2xlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcmVhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguUEkqdGhpcy5yYWRpdXMqdGhpcy5yYWRpdXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2VudHJvaWQoKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY29sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5lcnRpYShwb3NpdGlvbj86IFZlY3Rvcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDAuNSAqIHRoaXMubWFzcyAqIE1hdGgucG93KHRoaXMucmFkaXVzLCAyKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCb3VuZCgpOiBCb3VuZCB7XHJcbiAgICAgICAgcmV0dXJuIEFyY3MuZ2V0Qm91bmQodGhpcy5wb3NpdGlvbiwgdGhpcy5yYWRpdXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zbGF0ZShkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8g5L2N56e75Zu+5b2i5Y6f54K5XHJcbiAgICAgICAgdGhpcy5vcmlnaW4ueCArPSBkeDtcclxuICAgICAgICB0aGlzLm9yaWdpbi55ICs9IGR5O1xyXG5cclxuICAgICAgICAvLyDkvY3np7vljIXlm7Tnm5JcclxuICAgICAgICB0aGlzLmJvdW5kLnRyYW5zbGF0ZShkeCwgZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJvdGF0ZShyYWRpYW46IG51bWJlcikge1xyXG4gICAgICAgIGlmKHRoaXMucm90YXRlQ2VudGVyID09PSB0aGlzLnBvc2l0aW9uKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBveCA9IHRoaXMub3JpZ2luLngsXHJcbiAgICAgICAgICAgIG95ID0gdGhpcy5vcmlnaW4ueTtcclxuXHJcbiAgICAgICAgdGhpcy5vcmlnaW4gPSB0aGlzLm9yaWdpbi5yb3QocmFkaWFuLCB0aGlzLnJvdGF0ZUNlbnRlciwgdGhpcy5vcmlnaW4pO1xyXG4gICAgICAgIHRoaXMuYm91bmQudHJhbnNsYXRlKHRoaXMub3JpZ2luLnggLSBveCwgdGhpcy5vcmlnaW4ueSAtIG95KTtcclxuICAgIH1cclxuXHJcbiAgICBpc0NvbnRhaW5zKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIEFyY3MuaXNDb250YWlucyh0aGlzLCBuZXcgVmVjdG9yKHgsIHkpKTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 多边形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Polygon = void 0;\r\nconst body_1 = __webpack_require__(2);\r\nconst vertices_1 = __webpack_require__(3);\r\nconst vector_1 = __webpack_require__(0);\r\nclass Polygon extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.polygon);\r\n    }\r\n    beforeInitializeProperties(opt) {\r\n        // 将向量转化为顶点\r\n        if (opt.vertices) {\r\n            this.localVertexList = opt.vertices;\r\n        }\r\n        // 顶点数 > 3才构成多边形\r\n        if (this.localVertexList && this.localVertexList.length < 3)\r\n            return;\r\n        // 计算世界顶点坐标\r\n        this.vertexList = this.getVertexList();\r\n    }\r\n    /**\r\n     * 获取世界顶点坐标\r\n     */\r\n    getVertexList() {\r\n        return vertices_1.Vertices.transform2World(this.origin, this.localVertexList);\r\n    }\r\n    getArea() {\r\n        return Math.abs(vertices_1.Vertices.getArea(this.vertexList));\r\n    }\r\n    getCentroid() {\r\n        return vertices_1.Vertices.getCentroid(this.vertexList);\r\n    }\r\n    getInertia(position) {\r\n        position = position || this.position;\r\n        return vertices_1.Vertices.getInertia(this.vertexList, this.mass, position);\r\n    }\r\n    getAxes() {\r\n        return vertices_1.Vertices.getAxes(this.vertexList);\r\n    }\r\n    getBound() {\r\n        return vertices_1.Vertices.getBound(this.vertexList);\r\n    }\r\n    translate(dx, dy) {\r\n        // 位移图形原点\r\n        this.origin.x += dx;\r\n        this.origin.y += dy;\r\n        // 位移多边形顶点\r\n        vertices_1.Vertices.translate(this.vertexList, dx, dy);\r\n        // 位移包围盒\r\n        this.bound.translate(dx, dy);\r\n    }\r\n    rotate(radian) {\r\n        // 旋转顶点\r\n        vertices_1.Vertices.rotate(this.vertexList, radian, this.rotateCenter);\r\n        vector_1._tempVector4.x = this.rotateCenter.x - this.position.x;\r\n        vector_1._tempVector4.y = this.rotateCenter.y - this.position.y;\r\n        vector_1._tempVector4.x = 0;\r\n        vector_1._tempVector4.y = 0;\r\n        // 转动轴\r\n        for (let i = 0; i < this.axes.length; i++) {\r\n            this.axes[i] && this.axes[i].value.rot(radian, vector_1._tempVector4, this.axes[i].value);\r\n        }\r\n        // 更新包围盒\r\n        this.bound.update(this.vertexList);\r\n    }\r\n    isContains(x, y) {\r\n        return vertices_1.Vertices.isContains(this.vertexList, new vector_1.Vector(x, y));\r\n    }\r\n}\r\nexports.Polygon = Polygon;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9wb2x5Z29uLnRzP2E2ZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCxzQ0FBaUQ7QUFDakQsMENBQWdFO0FBQ2hFLHdDQUFzRDtBQVl0RCxNQUFhLE9BQVEsU0FBUSxXQUFJO0lBTTdCLFlBQVksR0FBZTtRQUN2QixLQUFLLENBQUMsR0FBRyxFQUFFLGVBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsMEJBQTBCLENBQUMsR0FBZTtRQUN0QyxXQUFXO1FBQ1gsSUFBRyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2IsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1NBQ3ZDO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUcsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDO1lBQUUsT0FBTztRQUVuRSxXQUFXO1FBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsYUFBYTtRQUNULE9BQU8sbUJBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLG1CQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQWlCO1FBQ3hCLFFBQVEsR0FBRyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyQyxPQUFPLG1CQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sbUJBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUFVLEVBQUUsRUFBVTtRQUM1QixTQUFTO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixVQUFVO1FBQ1YsbUJBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFNUMsUUFBUTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWM7UUFDakIsT0FBTztRQUNQLG1CQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU1RCxxQkFBWSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN2RCxxQkFBWSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUV2RCxxQkFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIscUJBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRW5CLE1BQU07UUFDTixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHFCQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwRjtRQUVELFFBQVE7UUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFVBQVUsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUMzQixPQUFPLG1CQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztDQUNKO0FBcEZELDBCQW9GQyIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWkmui+ueW9ouWImuS9k1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IEJvZHksIEJvZHlPcHQsIGJvZHlUeXBlIH0gZnJvbSBcIi4vYm9keVwiO1xyXG5pbXBvcnQgeyBWZXJ0ZXhMaXN0LCBWZXJ0aWNlcywgQXhpcyB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgVmVjdG9yLCBfdGVtcFZlY3RvcjQgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgQm91bmQgfSBmcm9tIFwiLi4vY29tbW9uL2JvdW5kXCI7XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvbHlnb25PcHQgZXh0ZW5kcyBCb2R5T3B0IHtcclxuICAgIHZlcnRpY2VzPzogVmVjdG9yW107XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFBvbHlnb24gZXh0ZW5kcyBCb2R5IHtcclxuICAgIC8vIOWkmui+ueW9oumhtueCue+8iOacrOWcsOWdkOagh++8iVxyXG4gICAgbG9jYWxWZXJ0ZXhMaXN0OiBWZXJ0ZXhMaXN0O1xyXG4gICAgLy8g5aSa6L655b2i6aG254K577yI5LiW55WM5Z2Q5qCH77yJXHJcbiAgICB2ZXJ0ZXhMaXN0OiBWZXJ0ZXhMaXN0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdDogUG9seWdvbk9wdCkge1xyXG4gICAgICAgIHN1cGVyKG9wdCwgYm9keVR5cGUucG9seWdvbik7XHJcbiAgICB9XHJcblxyXG4gICAgYmVmb3JlSW5pdGlhbGl6ZVByb3BlcnRpZXMob3B0OiBQb2x5Z29uT3B0KSB7XHJcbiAgICAgICAgLy8g5bCG5ZCR6YeP6L2s5YyW5Li66aG254K5XHJcbiAgICAgICAgaWYob3B0LnZlcnRpY2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxWZXJ0ZXhMaXN0ID0gb3B0LnZlcnRpY2VzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6aG254K55pWwID4gM+aJjeaehOaIkOWkmui+ueW9olxyXG4gICAgICAgIGlmKHRoaXMubG9jYWxWZXJ0ZXhMaXN0ICYmIHRoaXMubG9jYWxWZXJ0ZXhMaXN0Lmxlbmd0aCA8IDMpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8g6K6h566X5LiW55WM6aG254K55Z2Q5qCHXHJcbiAgICAgICAgdGhpcy52ZXJ0ZXhMaXN0ID0gdGhpcy5nZXRWZXJ0ZXhMaXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuJbnlYzpobbngrnlnZDmoIdcclxuICAgICAqL1xyXG4gICAgZ2V0VmVydGV4TGlzdCgpOiBWZXJ0ZXhMaXN0IHtcclxuICAgICAgICByZXR1cm4gVmVydGljZXMudHJhbnNmb3JtMldvcmxkKHRoaXMub3JpZ2luLCB0aGlzLmxvY2FsVmVydGV4TGlzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJlYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhWZXJ0aWNlcy5nZXRBcmVhKHRoaXMudmVydGV4TGlzdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENlbnRyb2lkKCk6IFZlY3RvciB7XHJcbiAgICAgICAgcmV0dXJuIFZlcnRpY2VzLmdldENlbnRyb2lkKHRoaXMudmVydGV4TGlzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5lcnRpYShwb3NpdGlvbj86IFZlY3Rvcik6IG51bWJlciB7XHJcbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgIHJldHVybiBWZXJ0aWNlcy5nZXRJbmVydGlhKHRoaXMudmVydGV4TGlzdCwgdGhpcy5tYXNzLCBwb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXhlcygpOiBBeGlzW10ge1xyXG4gICAgICAgIHJldHVybiBWZXJ0aWNlcy5nZXRBeGVzKHRoaXMudmVydGV4TGlzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Qm91bmQoKTogQm91bmQge1xyXG4gICAgICAgIHJldHVybiBWZXJ0aWNlcy5nZXRCb3VuZCh0aGlzLnZlcnRleExpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zbGF0ZShkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8g5L2N56e75Zu+5b2i5Y6f54K5XHJcbiAgICAgICAgdGhpcy5vcmlnaW4ueCArPSBkeDtcclxuICAgICAgICB0aGlzLm9yaWdpbi55ICs9IGR5O1xyXG4gICAgICAgIC8vIOS9jeenu+Wkmui+ueW9oumhtueCuVxyXG4gICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZSh0aGlzLnZlcnRleExpc3QsIGR4LCBkeSk7XHJcblxyXG4gICAgICAgIC8vIOS9jeenu+WMheWbtOebklxyXG4gICAgICAgIHRoaXMuYm91bmQudHJhbnNsYXRlKGR4LCBkeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcm90YXRlKHJhZGlhbjogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8g5peL6L2s6aG254K5XHJcbiAgICAgICAgVmVydGljZXMucm90YXRlKHRoaXMudmVydGV4TGlzdCwgcmFkaWFuLCB0aGlzLnJvdGF0ZUNlbnRlcik7XHJcblxyXG4gICAgICAgIF90ZW1wVmVjdG9yNC54ID0gdGhpcy5yb3RhdGVDZW50ZXIueCAtIHRoaXMucG9zaXRpb24ueDtcclxuICAgICAgICBfdGVtcFZlY3RvcjQueSA9IHRoaXMucm90YXRlQ2VudGVyLnkgLSB0aGlzLnBvc2l0aW9uLnk7XHJcblxyXG4gICAgICAgIF90ZW1wVmVjdG9yNC54ID0gMDtcclxuICAgICAgICBfdGVtcFZlY3RvcjQueSA9IDA7XHJcblxyXG4gICAgICAgIC8vIOi9rOWKqOi9tFxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmF4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5heGVzW2ldICYmIHRoaXMuYXhlc1tpXS52YWx1ZS5yb3QocmFkaWFuLCBfdGVtcFZlY3RvcjQsIHRoaXMuYXhlc1tpXS52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmm7TmlrDljIXlm7Tnm5JcclxuICAgICAgICB0aGlzLmJvdW5kLnVwZGF0ZSh0aGlzLnZlcnRleExpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ29udGFpbnMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gVmVydGljZXMuaXNDb250YWlucyh0aGlzLnZlcnRleExpc3QsIG5ldyBWZWN0b3IoeCwgeSkpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Torque = void 0;\r\nconst interface_1 = __webpack_require__(11);\r\nconst bodiesFactory_1 = __webpack_require__(22);\r\nconst vector_1 = __webpack_require__(0);\r\nconst matrix_1 = __webpack_require__(26);\r\ninterface_1.TorqueWorld.body = new bodiesFactory_1.BodiesFactory();\r\ninterface_1.TorqueWorld.vector = (x, y) => new vector_1.Vector(x, y);\r\ninterface_1.TorqueWorld.matrix = (r1, r2) => new matrix_1.Matrix(r1, r2);\r\nexports.Torque = interface_1.TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdG9ycXVlLnRzP2JhZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQStDO0FBQy9DLGdEQUFxRDtBQUNyRCx3Q0FBdUM7QUFDdkMseUNBQXVDO0FBRXZDLHVCQUFXLENBQUMsSUFBSSxHQUFHLElBQUksNkJBQWEsRUFBRSxDQUFDO0FBQ3ZDLHVCQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLHVCQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxlQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRXZELGNBQU0sR0FBRyx1QkFBVyxDQUFDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9ycXVlV29ybGQgfSBmcm9tIFwiLi9jb3JlL2ludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBCb2RpZXNGYWN0b3J5IH0gZnJvbSBcIi4vY29yZS9ib2RpZXNGYWN0b3J5XCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gXCIuL21hdGgvbWF0cml4XCI7XHJcblxyXG5Ub3JxdWVXb3JsZC5ib2R5ID0gbmV3IEJvZGllc0ZhY3RvcnkoKTtcclxuVG9ycXVlV29ybGQudmVjdG9yID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiBuZXcgVmVjdG9yKHgsIHkpO1xyXG5Ub3JxdWVXb3JsZC5tYXRyaXggPSAocjE6IFZlY3RvciwgcjI6IFZlY3RvcikgPT4gbmV3IE1hdHJpeChyMSwgcjIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRvcnF1ZSA9IFRvcnF1ZVdvcmxkOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TorqueWorld = void 0;\r\nconst util_1 = __webpack_require__(1);\r\nconst engine_1 = __webpack_require__(12);\r\n// Torque主类\r\nclass TorqueWorld {\r\n    constructor(width, height, opt) {\r\n        this.engine = new engine_1.Engine(width, height, opt);\r\n    }\r\n    /**\r\n     * 增加刚体\r\n     * @param body\r\n     */\r\n    append(body) {\r\n        if (Array.isArray(body)) {\r\n            body.map(b => this.append(b));\r\n        }\r\n        else {\r\n            body.beforeAppend(this.engine);\r\n            this.engine.bodies.push(body);\r\n            body.afterAppend();\r\n        }\r\n    }\r\n    /**\r\n     * 移除刚体\r\n     * @param body\r\n     */\r\n    remove(body) {\r\n        if (body.parent) {\r\n            body = body.parent;\r\n        }\r\n        body.beforeRemove();\r\n        util_1.Util.remove(this.engine.bodies, body);\r\n        body.afterRemove();\r\n    }\r\n    /**\r\n     * 销毁引擎\r\n     */\r\n    destroy() {\r\n        this.engine.bodies.map(body => this.remove(body));\r\n        this.engine.manifoldTable.clear();\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setEngineOption(opt) {\r\n        this.engine.setOption(opt);\r\n    }\r\n    addConstraint(type, options) { }\r\n    /**\r\n     * 绑定沟子事件\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    on(eventName, fn) {\r\n        this.engine.methods[eventName] = fn;\r\n    }\r\n    /**\r\n     * 开始运行\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        this.engine.timeStepper.start(frameNumLimit);\r\n    }\r\n    /**\r\n     * 暂停运行\r\n     */\r\n    pause() {\r\n        this.engine.timeStepper.pause();\r\n    }\r\n    /**\r\n     * 获取帧率\r\n     */\r\n    getFPS() {\r\n        return this.engine.timeStepper.fps;\r\n    }\r\n    /**\r\n     * 获取所有刚体\r\n     */\r\n    getBodies() {\r\n        return this.engine.bodies;\r\n    }\r\n}\r\nexports.TorqueWorld = TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9pbnRlcmZhY2UudHM/MjY1ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBc0M7QUFJdEMseUNBQTZDO0FBSTdDLFdBQVc7QUFDWCxNQUFhLFdBQVc7SUFPcEIsWUFBWSxLQUFhLEVBQUUsTUFBYyxFQUFFLEdBQWU7UUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsSUFBbUI7UUFDdEIsSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7YUFDSTtZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLElBQVU7UUFDYixJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN0QjtRQUVELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixXQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxlQUFlLENBQUMsR0FBYztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsYUFBYSxDQUFDLElBQVksRUFBRSxPQUFPLElBQUksQ0FBQztJQUV4Qzs7OztPQUlHO0lBQ0gsRUFBRSxDQUFDLFNBQWlCLEVBQUUsRUFBNEI7UUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsYUFBc0I7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBL0ZELGtDQStGQyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHkgfSBmcm9tIFwiLi4vYm9keS9ib2R5XCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSBcIi4uL21hdGgvbWF0cml4XCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBCb2RpZXNGYWN0b3J5IH0gZnJvbSBcIi4vYm9kaWVzRmFjdG9yeVwiO1xyXG5pbXBvcnQgeyBFbmdpbmUsIEVuZ2luZU9wdCB9IGZyb20gXCIuL2VuZ2luZVwiO1xyXG5cclxuXHJcblxyXG4vLyBUb3JxdWXkuLvnsbtcclxuZXhwb3J0IGNsYXNzIFRvcnF1ZVdvcmxkIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgYm9keTogQm9kaWVzRmFjdG9yeTtcclxuICAgIHB1YmxpYyBzdGF0aWMgdmVjdG9yOiAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IFZlY3RvcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgbWF0cml4OiAocjE6IFZlY3RvciwgcjI6IFZlY3RvcikgPT4gTWF0cml4O1xyXG5cclxuICAgIHByaXZhdGUgZW5naW5lOiBFbmdpbmU7XHJcblxyXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdD86IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lID0gbmV3IEVuZ2luZSh3aWR0aCwgaGVpZ2h0LCBvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5aKe5Yqg5Yia5L2TXHJcbiAgICAgKiBAcGFyYW0gYm9keSBcclxuICAgICAqL1xyXG4gICAgYXBwZW5kKGJvZHk6IEJvZHkgfCBCb2R5W10pIHtcclxuICAgICAgICBpZihBcnJheS5pc0FycmF5KGJvZHkpKSB7XHJcbiAgICAgICAgICAgIGJvZHkubWFwKGIgPT4gdGhpcy5hcHBlbmQoYikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYm9keS5iZWZvcmVBcHBlbmQodGhpcy5lbmdpbmUpO1xyXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5ib2RpZXMucHVzaChib2R5KTtcclxuICAgICAgICAgICAgYm9keS5hZnRlckFwcGVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOWImuS9k1xyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZShib2R5OiBCb2R5KSB7XHJcbiAgICAgICAgaWYoYm9keS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgYm9keSA9IGJvZHkucGFyZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYm9keS5iZWZvcmVSZW1vdmUoKTtcclxuICAgICAgICBVdGlsLnJlbW92ZSh0aGlzLmVuZ2luZS5ib2RpZXMsIGJvZHkpO1xyXG4gICAgICAgIGJvZHkuYWZ0ZXJSZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmUgOavgeW8leaTjlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLmJvZGllcy5tYXAoYm9keSA9PiB0aGlzLnJlbW92ZShib2R5KSk7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUubWFuaWZvbGRUYWJsZS5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5byV5pOO5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gb3B0IFxyXG4gICAgICovXHJcbiAgICBzZXRFbmdpbmVPcHRpb24ob3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZS5zZXRPcHRpb24ob3B0KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb25zdHJhaW50KHR5cGU6IHN0cmluZywgb3B0aW9ucykgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu5Hlrprmsp/lrZDkuovku7ZcclxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgXHJcbiAgICAgKiBAcGFyYW0gZm4gXHJcbiAgICAgKi9cclxuICAgIG9uKGV2ZW50TmFtZTogc3RyaW5nLCBmbjogKGVuZ2luZTogRW5naW5lKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUubWV0aG9kc1tldmVudE5hbWVdID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvIDlp4vov5DooYxcclxuICAgICAqIEBwYXJhbSBmcmFtZU51bUxpbWl0IOmZkOWItui/kOihjOWkmuWwkeW4p+WBnOS4i1xyXG4gICAgICovXHJcbiAgICBzdGFydChmcmFtZU51bUxpbWl0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUudGltZVN0ZXBwZXIuc3RhcnQoZnJhbWVOdW1MaW1pdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmoLlgZzov5DooYxcclxuICAgICAqL1xyXG4gICAgcGF1c2UoKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUudGltZVN0ZXBwZXIucGF1c2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW4p+eOh1xyXG4gICAgICovXHJcbiAgICBnZXRGUFMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmdpbmUudGltZVN0ZXBwZXIuZnBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5omA5pyJ5Yia5L2TXHJcbiAgICAgKi9cclxuICAgIGdldEJvZGllcygpOiBCb2R5W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZ2luZS5ib2RpZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Engine = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\nconst timeStepper_1 = __webpack_require__(13);\r\nconst detector_1 = __webpack_require__(14);\r\nconst sleeping_1 = __webpack_require__(20);\r\nconst manifoldTable_1 = __webpack_require__(21);\r\nconst contact_1 = __webpack_require__(4);\r\n// 主引擎\r\nclass Engine {\r\n    constructor(width, height, opt) {\r\n        // 引力缩放因子\r\n        this.gravityScaler = 50;\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        this.gravity = new vector_1.Vector(0, 9);\r\n        this.airFriction = 0;\r\n        this.enableSleeping = true;\r\n        this.enableCollisionDetection = true;\r\n        this.enableCollisionResolve = true;\r\n        this.methods = {\r\n            tickStart: () => { },\r\n            tickEnd: () => { },\r\n            beforeUpdate: () => { },\r\n            afterUpdate: () => { },\r\n            beforeRender: () => { },\r\n            afterRender: () => { },\r\n            start: () => { },\r\n            pause: () => { },\r\n            collisionStart: (manifolds) => { },\r\n            collisionActive: (manifolds) => { },\r\n            collisionEnd: (manifolds) => { }\r\n        };\r\n        util_1.Util.merge(this, opt);\r\n        this.bodies = [];\r\n        this.timeStepper = new timeStepper_1.TimeStepper(this, opt);\r\n        this.detector = new detector_1.Detector(this, opt);\r\n        this.manifoldTable = new manifoldTable_1.ManifoldTable(opt);\r\n        this.contactConstraint = new contact_1.ContactConstraint();\r\n        this.sleeping = new sleeping_1.Sleeping(opt);\r\n    }\r\n    /**\r\n     * 引擎更新\r\n     * @param dt 步长\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(dt, timeStamp) {\r\n        if (this.enableSleeping) {\r\n            // 更新刚体的休眠/唤醒状态\r\n            this.sleeping.update(this.bodies);\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            let body = this.bodies[i], gravityForce = vector_1._tempVector3;\r\n            if (body.ignoreGravity) {\r\n                continue;\r\n            }\r\n            gravityForce.x = this.gravity.x * body.mass * (1 / dt / 2);\r\n            gravityForce.y = this.gravity.y * body.mass * (1 / dt / 2);\r\n            // 应用受力\r\n            body.applyForce(gravityForce);\r\n            // 积分受力\r\n            body.integrateForces(dt);\r\n        }\r\n        // 是否开启碰撞检测\r\n        if (this.enableCollisionDetection) {\r\n            // 进行碰撞检测\r\n            let collisions = this.detector.detect(this.bodies);\r\n            //根据得到的碰撞对更新碰撞流形\r\n            this.manifoldTable.update(collisions, timeStamp);\r\n            // 移除缓存表超时的碰撞对\r\n            this.manifoldTable.filter(timeStamp);\r\n            // 是否开启了碰撞求解\r\n            if (this.enableCollisionResolve) {\r\n                // 若发现有休眠的刚体发生碰撞，则唤醒\r\n                if (this.enableSleeping)\r\n                    this.sleeping.afterCollision(this.manifoldTable.list);\r\n                // 求解碰撞约束\r\n                this.contactConstraint.solve(this.manifoldTable.list, dt);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            // 积分速度\r\n            this.bodies[i].integrateVelocities(dt);\r\n            this.bodies[i].clearForce();\r\n        }\r\n        this.manifoldTable.collisionStart.length && this.collisionStart();\r\n        this.manifoldTable.collisionActive.length && this.collisionActive();\r\n        this.manifoldTable.collisionEnd.length && this.collisionEnd();\r\n    }\r\n    /**\r\n     * 渲染物理引擎\r\n     * @param dt\r\n     */\r\n    render(dt) {\r\n        let body, i, j;\r\n        for (i = 0; i < this.bodies.length; i++) {\r\n            body = this.bodies[i];\r\n            // 睡眠或者静态的刚体不用每一帧都渲染\r\n            if (body.sleeping || body.static) {\r\n                continue;\r\n            }\r\n            // 渲染刚体\r\n            body.render(body, dt);\r\n            if (body.parts[0] !== body) {\r\n                for (j = 0; j < body.parts.length; j++) {\r\n                    body.parts[j].render(body.parts[j], dt);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setOption(opt) {\r\n        util_1.Util.merge(this, opt);\r\n        util_1.Util.merge(this.timeStepper, opt);\r\n    }\r\n    // ----------------------------------------------- hook --------------------------\r\n    tickStart() { this.methods.tickStart(); }\r\n    tickEnd() { this.methods.tickEnd(); }\r\n    beforeUpdate() { this.methods.beforeUpdate(); }\r\n    afterUpdate() { this.methods.afterUpdate(); }\r\n    beforeRender() { this.methods.beforeRender(); }\r\n    afterRender() { this.methods.afterRender(); }\r\n    start() { this.methods.start(); }\r\n    pause() { this.methods.pause(); }\r\n    collisionStart() { this.methods.collisionEnd(this.manifoldTable.collisionStart); }\r\n    collisionActive() { this.methods.collisionEnd(this.manifoldTable.collisionActive); }\r\n    collisionEnd() { this.methods.collisionEnd(this.manifoldTable.collisionEnd); }\r\n}\r\nexports.Engine = Engine;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TimeStepper = void 0;\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 时间步迭代器\r\n */\r\nclass TimeStepper {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.status = false;\r\n        this.fps = opt.fps || 60;\r\n        this.deltaFixed = opt.deltaFixed === undefined ? true : opt.deltaFixed;\r\n        this.deltaRecordLimit = 60;\r\n        util_1.Util.merge(this, opt);\r\n        this.dt = 1 / this.fps;\r\n        this.dtMin = this.dt;\r\n        this.dtMax = this.dt * 2;\r\n        this.frameCounter = 0;\r\n        this.frameStamp = 0;\r\n        this.prevTime = 0;\r\n        this.frameTotal = 0;\r\n        this.frameNumLimit = -1;\r\n        this.deltaRecorder = [];\r\n    }\r\n    /**\r\n     * 一次tick，也就是一次模拟\r\n     * @param timeStamp 当前时间戳\r\n     */\r\n    tick(timeStamp = 0) {\r\n        let dt;\r\n        // 固定dt\r\n        if (this.deltaFixed === false) {\r\n            // 动态计算dt\r\n            dt = (timeStamp - this.prevTime) / 1000 || this.dt;\r\n            this.prevTime = timeStamp;\r\n            // 根据过去的变化步长情况，优化当前步长，使引擎稳定\r\n            this.deltaRecorder.push(dt);\r\n            this.deltaRecorder = this.deltaRecorder.slice(-this.deltaRecordLimit);\r\n            dt = util_1.Util.clamp(Math.min.apply(Math, this.deltaRecorder), this.dtMin, this.dtMax);\r\n            // 更新dt\r\n            this.dt = dt;\r\n        }\r\n        // 动态计算fps\r\n        this.frameCounter += 1;\r\n        if (timeStamp - this.frameStamp >= 1000) {\r\n            this.fps = this.frameCounter / ((timeStamp - this.frameStamp) / 1000);\r\n            this.frameStamp = timeStamp;\r\n            this.frameCounter = 0;\r\n        }\r\n        this.engine.tickStart();\r\n        // 更新物理引擎\r\n        this.engine.beforeUpdate();\r\n        this.engine.update(this.dt, timeStamp);\r\n        this.engine.afterUpdate();\r\n        // 渲染物理引擎\r\n        this.engine.beforeRender();\r\n        this.engine.render(this.dt);\r\n        this.engine.afterRender();\r\n        this.engine.tickEnd();\r\n        this.frameTotal++;\r\n        if (this.frameNumLimit > 0 && this.frameTotal >= this.frameNumLimit) {\r\n            this.pause();\r\n            return;\r\n        }\r\n        this.raf = window.requestAnimationFrame(this.tick.bind(this));\r\n    }\r\n    /**\r\n     * 开始模拟\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        if (this.status)\r\n            return;\r\n        if (frameNumLimit && frameNumLimit > 0) {\r\n            this.frameNumLimit = frameNumLimit;\r\n        }\r\n        this.status = true;\r\n        this.engine.start();\r\n        this.tick();\r\n    }\r\n    /**\r\n     * 暂停模拟\r\n     */\r\n    pause() {\r\n        if (!this.status)\r\n            return;\r\n        this.status = false;\r\n        this.frameTotal = 0;\r\n        this.engine.pause();\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n}\r\nexports.TimeStepper = TimeStepper;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Detector = void 0;\r\nconst util_1 = __webpack_require__(1);\r\nconst body_1 = __webpack_require__(2);\r\nconst sat_1 = __webpack_require__(15);\r\nlet TimeList = [], TestFlag = false;\r\nlet test = document.getElementById('test');\r\nif (test) {\r\n    test.addEventListener('click', () => {\r\n        TestFlag = true;\r\n    });\r\n}\r\nclass Detector {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.SAT = new sat_1.SAT(opt);\r\n    }\r\n    /**\r\n     * 碰撞检测函数\r\n     * @param bodies\r\n     */\r\n    detect(bodies) {\r\n        let broadPhasePairs, collisions;\r\n        // 粗阶段检测\r\n        broadPhasePairs = this.broadPhase(bodies);\r\n        // console.log(broadPhasePairs);\r\n        let start = performance.now();\r\n        // 细阶段检测\r\n        collisions = this.narrowPhase(broadPhasePairs);\r\n        let end = performance.now(), range = 60;\r\n        if (TestFlag) {\r\n            if (TimeList.length < range) {\r\n                TimeList.push(end - start);\r\n            }\r\n            else {\r\n                let total = TimeList.reduce((t, cur) => {\r\n                    return t + cur;\r\n                });\r\n                console.log(total / range);\r\n                TestFlag = false;\r\n                TimeList.length = 0;\r\n            }\r\n        }\r\n        // console.log(collisions);\r\n        return collisions;\r\n    }\r\n    // --------------------------------------------- 粗阶段 --------------------------------\r\n    /**\r\n     * 粗检测阶段\r\n     * @param bodies 所有刚体\r\n     */\r\n    broadPhase(bodies) {\r\n        return this.sweepAndPrune(bodies);\r\n    }\r\n    /**\r\n     * 查看刚体是否出了可视区\r\n     * @param bound\r\n     */\r\n    isBodyOutWindow(bound) {\r\n        return bound.max.y < 0 || bound.min.x > this.engine.width || bound.min.y > this.engine.height || bound.max.x < 0;\r\n    }\r\n    /**\r\n     * 查看两个刚体是否允许发生碰撞\r\n     * @param bodyA\r\n     * @param bodyB\r\n     */\r\n    canCollide(bodyA, bodyB) {\r\n        // 若bodies[i]的碰撞过滤器过滤了bodies[i]，不进行检测\r\n        if (!bodyA.methods.filter(bodyA.mask, bodyB.mask) || !bodyB.methods.filter(bodyB.mask, bodyA.mask))\r\n            return false;\r\n        // 若刚体已经移出可视区了，跳过\r\n        if (this.isBodyOutWindow(bodyA.bound) || this.isBodyOutWindow(bodyB.bound))\r\n            return false;\r\n        // 两个静态刚体 ，跳过\r\n        if ((bodyA.static || bodyA.kinetic) && (bodyB.static || bodyB.kinetic))\r\n            return false;\r\n        // 两个睡眠刚体，跳过\r\n        if (bodyA.sleeping && bodyB.sleeping)\r\n            return false;\r\n        return true;\r\n    }\r\n    /**\r\n     * Sweep & Prune\r\n     * @param bodies\r\n     */\r\n    sweepAndPrune(bodies) {\r\n        let broadPhasePairList = [], i, j, len = bodies.length;\r\n        // 包围盒在x轴上排序 （直接插入排序）\r\n        // 第一次排序时包围盒趋向于无序，这时复杂度为O(n^2) \r\n        // 而因为时间相干性，在之后的每帧包围盒趋向有序，此时直接插入排序效率最高，为O(nlogn)\r\n        util_1.Util.insertSort(bodies, (bodyA, bodyB) => bodyA.bound.min.x - bodyB.bound.min.x);\r\n        for (i = 0; i < len; i++) {\r\n            for (j = i + 1; j < len; j++) {\r\n                let boundA = bodies[i].bound, boundB = bodies[j].bound;\r\n                // 已经不可能发生碰撞了，跳出循环\r\n                if (boundA.max.x < boundB.min.x)\r\n                    break;\r\n                // 若A，B不可以发生碰撞，返回\r\n                if (!this.canCollide(bodies[i], bodies[j]))\r\n                    continue;\r\n                // 一个个对比包围盒是否相交\r\n                if (boundA.min.y <= boundB.max.y && boundB.min.y <= boundA.max.y) {\r\n                    broadPhasePairList.push({\r\n                        bodyA: bodies[i],\r\n                        bodyB: bodies[j],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return broadPhasePairList;\r\n    }\r\n    // --------------------------------------------- 细阶段 --------------------------------\r\n    /**\r\n     * 细检测阶段\r\n     * @param broadPhasePairList 粗检查生成的潜在碰撞对\r\n     */\r\n    narrowPhase(broadPhasePairList) {\r\n        let collisions = [], prevCollision = null, pair, partsA, partsB, partA, partB, i, j, k;\r\n        for (i = 0; i < broadPhasePairList.length; i++) {\r\n            pair = broadPhasePairList[i];\r\n            partsA = pair.bodyA.parts;\r\n            partsB = pair.bodyB.parts;\r\n            for (j = 0; j < partsA.length; j++) {\r\n                partA = partsA[j];\r\n                for (k = 0; k < partsB.length; k++) {\r\n                    partB = partsB[k];\r\n                    // 两个子图形包围盒不相交，跳过\r\n                    if (!partA.bound.isIntersect(partB.bound))\r\n                        continue;\r\n                    prevCollision = this.getPrevCollision(partA, partB, this.engine.manifoldTable);\r\n                    // A,B皆为圆形\r\n                    if (partA.type === body_1.bodyType.circle && partB.type === body_1.bodyType.circle) {\r\n                        collisions.push(this.SAT.circleCollideCircle(partA, partB, prevCollision));\r\n                    }\r\n                    // A为多边形，B为圆形\r\n                    else if (partA.type === body_1.bodyType.polygon && partB.type === body_1.bodyType.circle) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                    // A为圆形，B为多边形\r\n                    else if (partA.type === body_1.bodyType.circle && partB.type === body_1.bodyType.polygon) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partB, partA, prevCollision));\r\n                    }\r\n                    // A,B皆为多边形\r\n                    else {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return collisions;\r\n    }\r\n    /**\r\n     * 获取上一次碰撞\r\n     * @param partA\r\n     * @param partB\r\n     * @param manifoldTable\r\n     */\r\n    getPrevCollision(partA, partB, manifoldTable) {\r\n        let id = util_1.Util.compositeId(partA.id, partB.id), manifold = manifoldTable.table[id];\r\n        if (this.engine.manifoldTable.enableCache && manifold && manifold.isActive) {\r\n            return manifold.collision;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nexports.Detector = Detector;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2RldGVjdG9yLnRzPzhiODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsc0NBQXNDO0FBQ3RDLHNDQUE4QztBQUs5QyxzQ0FBNEI7QUFHNUIsSUFBSSxRQUFRLEdBQUcsRUFBRSxFQUNiLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFFckIsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQyxJQUFHLElBQUksRUFBRTtJQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7Q0FDTjtBQWNELE1BQWEsUUFBUTtJQUtqQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxNQUFjO1FBQ2pCLElBQUksZUFBaUMsRUFDakMsVUFBdUIsQ0FBQztRQUU1QixRQUFRO1FBQ1IsZUFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsZ0NBQWdDO1FBRWhDLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU5QixRQUFRO1FBQ1IsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFL0MsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxFQUN2QixLQUFLLEdBQUcsRUFBRSxDQUFDO1FBRWYsSUFBRyxRQUFRLEVBQUU7WUFDVCxJQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFO2dCQUN4QixRQUFRLENBQUMsSUFB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QUFDLENBQUM7cUJBQ3RGO29CQUNELGFBQWE7eUJBQ1IsSUFBRyxLQUFLLENBQUMsSUFBSSxLQUFLLGVBQVEsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxlQUFRLENBQUMsT0FBTyxFQUFFO3dCQUN2RSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQVUsS0FBSyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO3FCQUN0RjtvQkFDRCxXQUFXO3lCQUNOO3dCQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBVSxLQUFLLEVBQVcsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7cUJBQy9GO2lCQUNKO2FBQ0o7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGdCQUFnQixDQUFDLEtBQVcsRUFBRSxLQUFXLEVBQUUsYUFBNEI7UUFDbkUsSUFBSSxFQUFFLEdBQUcsV0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFDekMsUUFBUSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFdkMsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDdkUsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDO1NBQzdCO2FBQ0k7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNmO0lBQ0wsQ0FBQztDQUNKO0FBeE1ELDRCQXdNQyIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVuZ2luZSwgRW5naW5lT3B0IH0gZnJvbSBcIi4uL2NvcmUvZW5naW5lXCI7XHJcbmltcG9ydCB7IEJvdW5kIH0gZnJvbSBcIi4uL2NvbW1vbi9ib3VuZFwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IEJvZHksIGJvZHlUeXBlIH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBDb2xsaXNpb24sIE1hbmlmb2xkIH0gZnJvbSBcIi4vbWFuaWZvbGRcIjtcclxuaW1wb3J0IHsgTWFuaWZvbGRUYWJsZSB9IGZyb20gXCIuL21hbmlmb2xkVGFibGVcIjtcclxuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSBcIi4uL2JvZHkvY2lyY2xlXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi4vYm9keS9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFNBVCB9IGZyb20gXCIuL3NhdFwiO1xyXG5cclxuXHJcbmxldCBUaW1lTGlzdCA9IFtdLFxyXG4gICAgVGVzdEZsYWcgPSBmYWxzZTtcclxuXHJcbmxldCB0ZXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3QnKTtcclxuXHJcbmlmKHRlc3QpIHtcclxuICAgIHRlc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgVGVzdEZsYWcgPSB0cnVlO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog56Kw5pKe5qOA5rWLXHJcbiAqL1xyXG5cclxuXHJcbi8vIOeyl+ajgOa1i+mYtuauteeUn+aIkOeahOe7k+aenOWvuee7k+aehFxyXG5leHBvcnQgdHlwZSBicm9hZFBoYXNlUGFpciA9IHtcclxuICAgIGJvZHlBOiBCb2R5O1xyXG4gICAgYm9keUI6IEJvZHk7XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgRGV0ZWN0b3Ige1xyXG4gICAgcHJpdmF0ZSBlbmdpbmU6IEVuZ2luZTtcclxuICAgIC8vIOWIhuemu+i9tOa1i+ivlVxyXG4gICAgcHJpdmF0ZSBTQVQ6IFNBVDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmU6IEVuZ2luZSwgb3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcclxuICAgICAgICB0aGlzLlNBVCA9IG5ldyBTQVQob3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeisOaSnuajgOa1i+WHveaVsFxyXG4gICAgICogQHBhcmFtIGJvZGllcyBcclxuICAgICAqL1xyXG4gICAgZGV0ZWN0KGJvZGllczogQm9keVtdKTogQ29sbGlzaW9uW10ge1xyXG4gICAgICAgIGxldCBicm9hZFBoYXNlUGFpcnM6IGJyb2FkUGhhc2VQYWlyW10sXHJcbiAgICAgICAgICAgIGNvbGxpc2lvbnM6IENvbGxpc2lvbltdO1xyXG5cclxuICAgICAgICAvLyDnspfpmLbmrrXmo4DmtYtcclxuICAgICAgICBicm9hZFBoYXNlUGFpcnMgPSB0aGlzLmJyb2FkUGhhc2UoYm9kaWVzKTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYnJvYWRQaGFzZVBhaXJzKTtcclxuXHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG4gICAgICAgIC8vIOe7humYtuauteajgOa1i1xyXG4gICAgICAgIGNvbGxpc2lvbnMgPSB0aGlzLm5hcnJvd1BoYXNlKGJyb2FkUGhhc2VQYWlycyk7XHJcblxyXG4gICAgICAgIGxldCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKSxcclxuICAgICAgICAgICAgcmFuZ2UgPSA2MDtcclxuXHJcbiAgICAgICAgaWYoVGVzdEZsYWcpIHtcclxuICAgICAgICAgICAgaWYoVGltZUxpc3QubGVuZ3RoIDwgcmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIFRpbWVMaXN0LnB1c2goZW5kIC0gc3RhcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gVGltZUxpc3QucmVkdWNlKCh0LCBjdXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCArIGN1cjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvdGFsIC8gcmFuZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIFRlc3RGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBUaW1lTGlzdC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhjb2xsaXNpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOeyl+mYtuautSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57KX5qOA5rWL6Zi25q61XHJcbiAgICAgKiBAcGFyYW0gYm9kaWVzIOaJgOacieWImuS9k1xyXG4gICAgICovXHJcbiAgICBicm9hZFBoYXNlKGJvZGllczogQm9keVtdKTogYnJvYWRQaGFzZVBhaXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3dlZXBBbmRQcnVuZShib2RpZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p+l55yL5Yia5L2T5piv5ZCm5Ye65LqG5Y+v6KeG5Yy6XHJcbiAgICAgKiBAcGFyYW0gYm91bmQgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaXNCb2R5T3V0V2luZG93KGJvdW5kOiBCb3VuZCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBib3VuZC5tYXgueSA8IDAgfHwgYm91bmQubWluLnggPiB0aGlzLmVuZ2luZS53aWR0aCB8fCBib3VuZC5taW4ueSA+IHRoaXMuZW5naW5lLmhlaWdodCB8fCBib3VuZC5tYXgueCA8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvkuKTkuKrliJrkvZPmmK/lkKblhYHorrjlj5HnlJ/norDmkp5cclxuICAgICAqIEBwYXJhbSBib2R5QSBcclxuICAgICAqIEBwYXJhbSBib2R5QiBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYW5Db2xsaWRlKGJvZHlBOiBCb2R5LCBib2R5QjogQm9keSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIOiLpWJvZGllc1tpXeeahOeisOaSnui/h+a7pOWZqOi/h+a7pOS6hmJvZGllc1tpXe+8jOS4jei/m+ihjOajgOa1i1xyXG4gICAgICAgIGlmKCFib2R5QS5tZXRob2RzLmZpbHRlcihib2R5QS5tYXNrLCBib2R5Qi5tYXNrKSB8fCAhYm9keUIubWV0aG9kcy5maWx0ZXIoYm9keUIubWFzaywgYm9keUEubWFzaykpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDoi6XliJrkvZPlt7Lnu4/np7vlh7rlj6/op4bljLrkuobvvIzot7Pov4dcclxuICAgICAgICBpZih0aGlzLmlzQm9keU91dFdpbmRvdyhib2R5QS5ib3VuZCkgfHwgdGhpcy5pc0JvZHlPdXRXaW5kb3coYm9keUIuYm91bmQpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIOS4pOS4qumdmeaAgeWImuS9kyDvvIzot7Pov4dcclxuICAgICAgICBpZigoYm9keUEuc3RhdGljIHx8IGJvZHlBLmtpbmV0aWMpICYmIChib2R5Qi5zdGF0aWMgfHwgYm9keUIua2luZXRpYykpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8g5Lik5Liq552h55yg5Yia5L2T77yM6Lez6L+HXHJcbiAgICAgICAgaWYoYm9keUEuc2xlZXBpbmcgJiYgYm9keUIuc2xlZXBpbmcpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTd2VlcCAmIFBydW5lXHJcbiAgICAgKiBAcGFyYW0gYm9kaWVzIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN3ZWVwQW5kUHJ1bmUoYm9kaWVzOiBCb2R5W10pOiBicm9hZFBoYXNlUGFpcltdIHtcclxuICAgICAgICBsZXQgYnJvYWRQaGFzZVBhaXJMaXN0OiBicm9hZFBoYXNlUGFpcltdID0gW10sXHJcbiAgICAgICAgICAgIGksIGosIGxlbiA9IGJvZGllcy5sZW5ndGg7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5YyF5Zu055uS5ZyoeOi9tOS4iuaOkuW6jyDvvIjnm7TmjqXmj5LlhaXmjpLluo/vvIlcclxuICAgICAgICAvLyDnrKzkuIDmrKHmjpLluo/ml7bljIXlm7Tnm5LotovlkJHkuo7ml6Dluo/vvIzov5nml7blpI3mnYLluqbkuLpPKG5eMikgXHJcbiAgICAgICAgLy8g6ICM5Zug5Li65pe26Ze055u45bmy5oCn77yM5Zyo5LmL5ZCO55qE5q+P5bin5YyF5Zu055uS6LaL5ZCR5pyJ5bqP77yM5q2k5pe255u05o6l5o+S5YWl5o6S5bqP5pWI546H5pyA6auY77yM5Li6TyhubG9nbilcclxuICAgICAgICBVdGlsLmluc2VydFNvcnQ8Qm9keT4oYm9kaWVzLCAoYm9keUEsIGJvZHlCKSA9PiBib2R5QS5ib3VuZC5taW4ueCAtIGJvZHlCLmJvdW5kLm1pbi54KTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yKGogPSBpICsgMTsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYm91bmRBID0gYm9kaWVzW2ldLmJvdW5kLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kQiA9IGJvZGllc1tqXS5ib3VuZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDlt7Lnu4/kuI3lj6/og73lj5HnlJ/norDmkp7kuobvvIzot7Plh7rlvqrnjq9cclxuICAgICAgICAgICAgICAgIGlmKGJvdW5kQS5tYXgueCA8IGJvdW5kQi5taW4ueCkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6IulQe+8jELkuI3lj6/ku6Xlj5HnlJ/norDmkp7vvIzov5Tlm55cclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmNhbkNvbGxpZGUoYm9kaWVzW2ldLCBib2RpZXNbal0pKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDkuIDkuKrkuKrlr7nmr5TljIXlm7Tnm5LmmK/lkKbnm7jkuqRcclxuICAgICAgICAgICAgICAgIGlmKGJvdW5kQS5taW4ueSA8PSBib3VuZEIubWF4LnkgJiYgYm91bmRCLm1pbi55IDw9IGJvdW5kQS5tYXgueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyb2FkUGhhc2VQYWlyTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUE6IGJvZGllc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUI6IGJvZGllc1tqXSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJyb2FkUGhhc2VQYWlyTGlzdDtcclxuICAgIH0gXHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOe7humYtuautSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uG5qOA5rWL6Zi25q61XHJcbiAgICAgKiBAcGFyYW0gYnJvYWRQaGFzZVBhaXJMaXN0IOeyl+ajgOafpeeUn+aIkOeahOa9nOWcqOeisOaSnuWvuVxyXG4gICAgICovXHJcbiAgICBuYXJyb3dQaGFzZShicm9hZFBoYXNlUGFpckxpc3Q6IGJyb2FkUGhhc2VQYWlyW10pOiBDb2xsaXNpb25bXSB7XHJcbiAgICAgICAgbGV0IGNvbGxpc2lvbnMgPSBbXSxcclxuICAgICAgICAgICAgcHJldkNvbGxpc2lvbiA9IG51bGwsXHJcbiAgICAgICAgICAgIHBhaXI6IGJyb2FkUGhhc2VQYWlyLFxyXG4gICAgICAgICAgICBwYXJ0c0E6IEJvZHlbXSxcclxuICAgICAgICAgICAgcGFydHNCOiBCb2R5W10sXHJcbiAgICAgICAgICAgIHBhcnRBOiBCb2R5LFxyXG4gICAgICAgICAgICBwYXJ0QjogQm9keSxcclxuICAgICAgICAgICAgaSwgaiwgaztcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgYnJvYWRQaGFzZVBhaXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHBhaXIgPSBicm9hZFBoYXNlUGFpckxpc3RbaV07XHJcbiAgICAgICAgICAgIHBhcnRzQSA9IHBhaXIuYm9keUEucGFydHM7XHJcbiAgICAgICAgICAgIHBhcnRzQiA9IHBhaXIuYm9keUIucGFydHM7XHJcblxyXG4gICAgICAgICAgICBmb3IoaiA9IDA7IGogPCBwYXJ0c0EubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHBhcnRBID0gcGFydHNBW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihrID0gMDsgayA8IHBhcnRzQi5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRCID0gcGFydHNCW2tdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDkuKTkuKrlrZDlm77lvaLljIXlm7Tnm5LkuI3nm7jkuqTvvIzot7Pov4dcclxuICAgICAgICAgICAgICAgICAgICBpZighcGFydEEuYm91bmQuaXNJbnRlcnNlY3QocGFydEIuYm91bmQpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkNvbGxpc2lvbiA9IHRoaXMuZ2V0UHJldkNvbGxpc2lvbihwYXJ0QSwgcGFydEIsIHRoaXMuZW5naW5lLm1hbmlmb2xkVGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBLELnmobkuLrlnIblvaJcclxuICAgICAgICAgICAgICAgICAgICBpZihwYXJ0QS50eXBlID09PSBib2R5VHlwZS5jaXJjbGUgJiYgcGFydEIudHlwZSA9PT0gYm9keVR5cGUuY2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnMucHVzaCh0aGlzLlNBVC5jaXJjbGVDb2xsaWRlQ2lyY2xlKDxDaXJjbGU+cGFydEEsIDxDaXJjbGU+cGFydEIsIHByZXZDb2xsaXNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQeS4uuWkmui+ueW9ou+8jELkuLrlnIblvaJcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhcnRBLnR5cGUgPT09IGJvZHlUeXBlLnBvbHlnb24gJiYgcGFydEIudHlwZSA9PT0gYm9keVR5cGUuY2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnMucHVzaCh0aGlzLlNBVC5wb2x5Z29uQ29sbGlkZUJvZHkoPFBvbHlnb24+cGFydEEsIHBhcnRCLCBwcmV2Q29sbGlzaW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEHkuLrlnIblvaLvvIxC5Li65aSa6L655b2iXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwYXJ0QS50eXBlID09PSBib2R5VHlwZS5jaXJjbGUgJiYgcGFydEIudHlwZSA9PT0gYm9keVR5cGUucG9seWdvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25zLnB1c2godGhpcy5TQVQucG9seWdvbkNvbGxpZGVCb2R5KDxQb2x5Z29uPnBhcnRCLCBwYXJ0QSwgcHJldkNvbGxpc2lvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBBLELnmobkuLrlpJrovrnlvaJcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKHRoaXMuU0FULnBvbHlnb25Db2xsaWRlQm9keSg8UG9seWdvbj5wYXJ0QSwgPFBvbHlnb24+cGFydEIsIHByZXZDb2xsaXNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb2xsaXNpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiK5LiA5qyh56Kw5pKeXHJcbiAgICAgKiBAcGFyYW0gcGFydEEgXHJcbiAgICAgKiBAcGFyYW0gcGFydEIgXHJcbiAgICAgKiBAcGFyYW0gbWFuaWZvbGRUYWJsZSBcclxuICAgICAqL1xyXG4gICAgZ2V0UHJldkNvbGxpc2lvbihwYXJ0QTogQm9keSwgcGFydEI6IEJvZHksIG1hbmlmb2xkVGFibGU6IE1hbmlmb2xkVGFibGUpOiBDb2xsaXNpb24ge1xyXG4gICAgICAgIGxldCBpZCA9IFV0aWwuY29tcG9zaXRlSWQocGFydEEuaWQsIHBhcnRCLmlkKSxcclxuICAgICAgICAgICAgbWFuaWZvbGQgPSBtYW5pZm9sZFRhYmxlLnRhYmxlW2lkXTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5lbmdpbmUubWFuaWZvbGRUYWJsZS5lbmFibGVDYWNoZSAmJiBtYW5pZm9sZCAmJiBtYW5pZm9sZC5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFuaWZvbGQuY29sbGlzaW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SAT = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst vertices_1 = __webpack_require__(3);\r\nconst arcs_1 = __webpack_require__(6);\r\nconst manifold_1 = __webpack_require__(7);\r\nconst contact_1 = __webpack_require__(4);\r\nconst util_1 = __webpack_require__(1);\r\nconst axesFilter_1 = __webpack_require__(17);\r\nconst vClip_1 = __webpack_require__(18);\r\nconst circle_1 = __webpack_require__(8);\r\nconst body_1 = __webpack_require__(2);\r\n/**\r\n * 分离轴算法\r\n * 参考：https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\r\n */\r\nclass SAT {\r\n    constructor(opt) {\r\n        // 是否开启SAT加速\r\n        this.enableSATBoost = true;\r\n        this.reuseCollisionThreshold = 0.7;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 多边形 - 多边形或圆形（geometry）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param prevCollision\r\n     */\r\n    polygonCollideBody(poly, geometry, prevCollision) {\r\n        let canReuse = this.canReuseCollision(poly, geometry, prevCollision), collision = null, minOverlap, axes;\r\n        // 若能用缓存，使用缓存\r\n        if (canReuse) {\r\n            collision = prevCollision;\r\n            minOverlap = this.detect(poly, geometry, [collision.axis], collision.oppositeClosestIndex);\r\n            if (minOverlap === null) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            collision.prevContacts = collision.contacts;\r\n            collision.isReuse = true;\r\n        }\r\n        // 若不能用缓存，则进行完整的测试\r\n        else {\r\n            if (prevCollision) {\r\n                prevCollision.isReuse = false;\r\n            }\r\n            collision = new manifold_1.Collision();\r\n            axes = this.getTestAxes(poly, geometry);\r\n            minOverlap = this.detect(poly, geometry, axes);\r\n            // 若发现两个刚体投影的重叠部分是负的，即表示它们没相交\r\n            if (minOverlap === null) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            collision.partA = poly;\r\n            collision.partB = geometry;\r\n            collision.bodyA = poly.parent || poly;\r\n            collision.bodyB = geometry.parent || geometry;\r\n            let axis = minOverlap.axis, normal = this.reviseNormal(minOverlap.axis.value, poly, geometry);\r\n            // 此处collision.axis与minOverlap.axis不能共享一个对象，因为collision.axis是根据不同碰撞而变化的，而minOverlap.axis不能变\r\n            collision.axis.value = axis.value;\r\n            collision.axis.supportVertexIndex = axis.supportVertexIndex;\r\n            collision.axis.oppositeVertexIndex = axis.oppositeVertexIndex;\r\n            collision.axis.opposite = axis.opposite;\r\n            collision.axis.origin = axis.origin;\r\n            collision.axis.edge = axis.edge;\r\n            collision.oppositeClosestIndex = minOverlap.oppositeClosestIndex;\r\n            collision.normal = normal;\r\n            collision.tangent = normal.nor();\r\n        }\r\n        // 计算碰撞点\r\n        collision.contacts = this.findContacts(poly, geometry, minOverlap, collision.normal);\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * 圆形 - 圆形\r\n     * @param circleA\r\n     * @param circleB\r\n     * @param prevCollision\r\n     */\r\n    circleCollideCircle(circleA, circleB, prevCollision) {\r\n        let axis = circleA.position.sub(circleB.position, vector_1._tempVector1), overlaps = (circleA.radius + circleB.radius) - axis.len(), minOverlap = {\r\n            value: overlaps,\r\n            axis: {\r\n                value: axis,\r\n                origin: null,\r\n                opposite: null,\r\n                edge: null,\r\n                supportVertexIndex: -1,\r\n                oppositeVertexIndex: -1\r\n            },\r\n            oppositeClosestIndex: -1\r\n        }, collision = new manifold_1.Collision(), normal;\r\n        // 两圆心距离比两圆半径和要大，即没有发生碰撞\r\n        if (overlaps < 0) {\r\n            collision.collide = false;\r\n            return collision;\r\n        }\r\n        normal = this.reviseNormal(axis, circleA, circleB).nol();\r\n        minOverlap.axis.value = normal;\r\n        collision.axis = minOverlap.axis;\r\n        collision.partA = circleA;\r\n        collision.partB = circleB;\r\n        collision.bodyA = circleA.parent || circleA;\r\n        collision.bodyB = circleB.parent || circleB;\r\n        collision.normal = normal;\r\n        collision.tangent = normal.nor();\r\n        let position = circleB.position.loc(normal, circleB.radius - minOverlap.value / 2);\r\n        collision.contacts = [contact_1.ContactConstraint.create(null, position, minOverlap.value)];\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * --------------------------------------------------------------------------------------------------\r\n     */\r\n    /**\r\n     * 进行分离轴检测\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axes\r\n     * @param prevOppositeClosestIndex\r\n     */\r\n    detect(poly, geometry, axes, prevOppositeClosestIndex) {\r\n        let minOverlap = Infinity, oppositeClosestIndex, getOverlaps = this.enableSATBoost ? this.selectiveProjectionMethod : this.fullProjectionMethod, overlaps, i, index;\r\n        // 将两个刚体投影到所有轴上\r\n        for (i = 0; i < axes.length; i++) {\r\n            if (axes[i] === null) {\r\n                continue;\r\n            }\r\n            overlaps = getOverlaps(poly, geometry, axes[i], prevOppositeClosestIndex);\r\n            if (overlaps.depth < 0) {\r\n                return null;\r\n            }\r\n            if (overlaps.depth < minOverlap) {\r\n                minOverlap = overlaps.depth;\r\n                oppositeClosestIndex = overlaps.oppositeClosestIndex;\r\n                index = i;\r\n            }\r\n        }\r\n        return {\r\n            value: minOverlap,\r\n            oppositeClosestIndex,\r\n            axis: axes[index],\r\n        };\r\n    }\r\n    /**\r\n     * 获取测试轴\r\n     * @param poly\r\n     * @param geometry\r\n     */\r\n    getTestAxes(poly, geometry) {\r\n        let axes, circleAxis;\r\n        // 若geometry是圆形，计算一条动态轴\r\n        if (geometry.type === body_1.bodyType.circle) {\r\n            circleAxis = arcs_1.Arcs.getAxes(geometry, poly);\r\n        }\r\n        // 如果开启了加速功能，首先进行轴过滤\r\n        if (this.enableSATBoost) {\r\n            axes = axesFilter_1.axesFilter(poly, geometry);\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n        }\r\n        else {\r\n            let opposite = geometry.type === body_1.bodyType.circle ? geometry : geometry.vertexList, oppositeAxes, i;\r\n            axes = [];\r\n            for (i = 0; i < poly.axes.length; i++) {\r\n                if (poly.axes[i]) {\r\n                    poly.axes[i].opposite = opposite;\r\n                    axes.push(poly.axes[i]);\r\n                }\r\n            }\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n            else {\r\n                oppositeAxes = geometry.axes;\r\n                for (i = 0; i < oppositeAxes.length; i++) {\r\n                    if (oppositeAxes[i]) {\r\n                        oppositeAxes[i].opposite = poly.vertexList;\r\n                        axes.push(oppositeAxes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return axes;\r\n    }\r\n    /**\r\n     * 全投影法（传统）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     */\r\n    fullProjectionMethod(poly, geometry, axis, prevOppositeClosestIndex) {\r\n        let axisVector = axis.value, partA = poly.vertexList, partB = geometry.type === body_1.bodyType.polygon ? geometry.vertexList : geometry, projection1, projection2;\r\n        // 若geometry是多边形\r\n        if (Array.isArray(partB)) {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = vertices_1.Vertices.projection(partB, axisVector);\r\n        }\r\n        // 是圆形\r\n        else {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = arcs_1.Arcs.projection(partB, axisVector);\r\n        }\r\n        return {\r\n            depth: Math.min(projection1.max - projection2.min, projection2.max - projection1.min),\r\n            oppositeClosestIndex: -1\r\n        };\r\n    }\r\n    /**\r\n     * 选择投影法\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     * @param oppositeClosestIndex\r\n     */\r\n    selectiveProjectionMethod(poly, geometry, axis, oppositeClosestIndex) {\r\n        let axisVector = axis.value, opposite = axis.opposite;\r\n        // 该轴是圆形和多边形的动态轴\r\n        if (opposite === null) {\r\n            let projection1 = vertices_1.Vertices.projection(poly.vertexList, axisVector), projection2 = arcs_1.Arcs.projection(geometry, axisVector);\r\n            return {\r\n                depth: Math.min(projection1.max - projection2.min, projection2.max - projection1.min),\r\n                oppositeClosestIndex\r\n            };\r\n        }\r\n        let supportVertex = axis.origin[axis.supportVertexIndex], supportProjection = supportVertex.dot(axisVector);\r\n        // 对面是圆形\r\n        if (opposite instanceof circle_1.Circle) {\r\n            let circleProjection = arcs_1.Arcs.projection(opposite, axisVector);\r\n            return {\r\n                depth: supportProjection - circleProjection.min,\r\n                oppositeClosestIndex\r\n            };\r\n        }\r\n        let maxOverlap = -Infinity;\r\n        // 若最近点没有缓存，执行爬山法重新计算最近点\r\n        if (oppositeClosestIndex === undefined) {\r\n            let oppositeIndex = axis.oppositeVertexIndex, prev, next, seekPrev = true, seekNext = true, lastPrevPro, lastNextPro, projection;\r\n            projection = opposite[oppositeIndex].dot(axisVector);\r\n            prev = next = oppositeIndex;\r\n            lastPrevPro = lastNextPro = projection;\r\n            oppositeClosestIndex = oppositeIndex;\r\n            do {\r\n                if (!seekPrev && !seekNext) {\r\n                    break;\r\n                }\r\n                if (seekPrev) {\r\n                    prev = prev > 0 ? prev - 1 : opposite.length - 1;\r\n                    projection = opposite[prev].dot(axisVector);\r\n                    if (projection > lastPrevPro) {\r\n                        seekPrev = false;\r\n                        prev = (prev + 1) % opposite.length;\r\n                    }\r\n                    else {\r\n                        oppositeClosestIndex = prev;\r\n                        lastPrevPro = projection;\r\n                    }\r\n                }\r\n                if (seekNext) {\r\n                    next = (next + 1) % opposite.length;\r\n                    projection = opposite[next].dot(axisVector);\r\n                    if (projection > lastNextPro) {\r\n                        seekNext = false;\r\n                        next = next > 0 ? next - 1 : opposite.length - 1;\r\n                    }\r\n                    else {\r\n                        oppositeClosestIndex = next;\r\n                        lastNextPro = projection;\r\n                    }\r\n                }\r\n            } while (prev !== next);\r\n        }\r\n        maxOverlap = supportProjection - opposite[oppositeClosestIndex].dot(axisVector);\r\n        return {\r\n            depth: maxOverlap,\r\n            oppositeClosestIndex\r\n        };\r\n    }\r\n    /**\r\n     * 修正碰撞法线方向，使其始终背向刚体A\r\n     * @param normal 要修正的法线\r\n     * @param bodyA 刚体A\r\n     * @param bodyB 刚体B\r\n     */\r\n    reviseNormal(normal, bodyA, bodyB) {\r\n        if (normal.dot(bodyB.position.sub(bodyA.position, vector_1._tempVector1)) > 0) {\r\n            return normal.inv();\r\n        }\r\n        return normal;\r\n    }\r\n    /**\r\n     * 查看碰撞缓存是否可以复用\r\n     * @param bodyA\r\n     * @param bodyB\r\n     * @param prevCollision 上一次的碰撞\r\n     */\r\n    canReuseCollision(bodyA, bodyB, prevCollision) {\r\n        // 若上次碰撞的缓存存在\r\n        if (prevCollision) {\r\n            let parentA = bodyA.parent || bodyA, parentB = bodyB.parent || bodyB, motion = Math.sqrt(parentA.motion + parentB.motion);\r\n            // 若上次碰撞判定为真，且当前碰撞对刚体趋于静止，可复用\r\n            return prevCollision.collide && motion < this.reuseCollisionThreshold;\r\n        }\r\n        // 碰撞缓存不存在，直接判定无法复用\r\n        return false;\r\n    }\r\n    /**\r\n     * 求解碰撞点\r\n     * @param geometry\r\n     * @param minOverlap\r\n     * @param normal\r\n     */\r\n    findContacts(polygon, geometry, minOverlap, normal) {\r\n        if (geometry.type === body_1.bodyType.polygon) {\r\n            return vClip_1.vClip(minOverlap);\r\n        }\r\n        else {\r\n            return vClip_1.vClipCircle(polygon, geometry, normal, minOverlap.value);\r\n        }\r\n    }\r\n}\r\nexports.SAT = SAT;\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Constraint = void 0;\r\nclass Constraint {\r\n    constructor() { }\r\n    /**\r\n     * 创建一个约束\r\n     */\r\n    create(...arg) {\r\n        return null;\r\n    }\r\n    /**\r\n     * 求解接触约束\r\n     * @param constraints\r\n     * @param dt\r\n     */\r\n    solve(constraints, dt) { }\r\n    /**\r\n     * 修正位置约束预处理\r\n     * @param constraints\r\n     * @param dt\r\n     */\r\n    initSolver(constraints, dt) { }\r\n}\r\nexports.Constraint = Constraint;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RyYWludC9jb25zdHJhaW50LnRzPzU1MTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsTUFBYSxVQUFVO0lBTW5CLGdCQUFnQixDQUFDO0lBRWpCOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEdBQUcsR0FBRztRQUNULE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFdBQWtCLEVBQUUsRUFBVSxJQUFJLENBQUM7SUFFekM7Ozs7T0FJRztJQUNILFVBQVUsQ0FBQyxXQUFrQixFQUFFLEVBQVUsSUFBSSxDQUFDO0NBQ2pEO0FBNUJELGdDQTRCQyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zdHJhaW50IHtcclxuICAgIC8vIOmAn+W6puaxguino+i/reS7o+asoeaVsFxyXG4gICAgcHJvdGVjdGVkIHZlbG9jaXR5U29sdmVySXRlcmF0aW9uczogbnVtYmVyO1xyXG4gICAgLy8g5L2N572u5rGC6Kej6L+t5Luj5qyh5pWwXHJcbiAgICBwcm90ZWN0ZWQgcG9zaXRpb25Tb2x2ZXJJdGVyYXRpb25zOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuS4gOS4que6puadnyBcclxuICAgICAqL1xyXG4gICAgY3JlYXRlKC4uLmFyZykge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rGC6Kej5o6l6Kem57qm5p2fXHJcbiAgICAgKiBAcGFyYW0gY29uc3RyYWludHMgXHJcbiAgICAgKiBAcGFyYW0gZHQgXHJcbiAgICAgKi9cclxuICAgIHNvbHZlKGNvbnN0cmFpbnRzOiBhbnlbXSwgZHQ6IG51bWJlcikgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkv67mraPkvY3nva7nuqbmnZ/pooTlpITnkIZcclxuICAgICAqIEBwYXJhbSBjb25zdHJhaW50cyBcclxuICAgICAqIEBwYXJhbSBkdCBcclxuICAgICAqL1xyXG4gICAgaW5pdFNvbHZlcihjb25zdHJhaW50czogYW55W10sIGR0OiBudW1iZXIpIHsgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.axesFilter = void 0;\r\nconst body_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(0);\r\nfunction axesFilter(poly, geometry) {\r\n    let centroidVector = geometry.position.sub(poly.position, vector_1._tempVector1), axesA, axesB, supportIndexA, supportIndexB, i, res = [];\r\n    axesA = findClosestAxes(poly, geometry, centroidVector);\r\n    supportIndexA = axesA[0].supportVertexIndex;\r\n    if (geometry.type === body_1.bodyType.polygon) {\r\n        axesB = findClosestAxes(geometry, poly, centroidVector.inv(centroidVector));\r\n        supportIndexB = axesB[0].supportVertexIndex;\r\n    }\r\n    for (i = 0; i < axesA.length; i++) {\r\n        axesA[i].oppositeVertexIndex = supportIndexB;\r\n        res.push(axesA[i]);\r\n    }\r\n    if (axesB) {\r\n        for (i = 0; i < axesB.length; i++) {\r\n            axesB[i].oppositeVertexIndex = supportIndexA;\r\n            res.push(axesB[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexports.axesFilter = axesFilter;\r\n/**\r\n * @param poly\r\n * @param geometry\r\n * @param centroidVector\r\n * @param oppositeCentroid\r\n */\r\nfunction findClosestAxes(poly, geometry, centroidVector) {\r\n    let v = poly.vertexList, axes = poly.axes, vertex, axis, distance, minDistance = Infinity, dot, lastDot = axes[axes.length - 1].value.dot(centroidVector), index = -1, opposite = geometry.type === body_1.bodyType.polygon ? geometry.vertexList : geometry, oppositeCentroid = geometry.position;\r\n    for (let i = 0; i < v.length; i++) {\r\n        vertex = v[i];\r\n        axis = axes[i];\r\n        dot = axis.value.dot(centroidVector);\r\n        if (dot < 0 && lastDot < 0) {\r\n            continue;\r\n        }\r\n        distance = (vertex.x - oppositeCentroid.x) ** 2 + (vertex.y - oppositeCentroid.y) ** 2;\r\n        if (distance < minDistance) {\r\n            minDistance = distance;\r\n            index = i;\r\n        }\r\n        lastDot = dot;\r\n    }\r\n    let prev = index > 0 ? index - 1 : v.length - 1, prevAxis = axes[prev], indexAxis = axes[index];\r\n    prevAxis.supportVertexIndex = index;\r\n    prevAxis.opposite = opposite;\r\n    prevAxis.origin = poly.vertexList;\r\n    indexAxis.supportVertexIndex = index;\r\n    indexAxis.opposite = opposite;\r\n    indexAxis.origin = poly.vertexList;\r\n    return [prevAxis, indexAxis];\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2F4ZXNGaWx0ZXIudHM/NGRkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBOEM7QUFJOUMsd0NBQWtGO0FBSWxGLFNBQWdCLFVBQVUsQ0FBQyxJQUFhLEVBQUUsUUFBYztJQUNwRCxJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLHFCQUFZLENBQUMsRUFDbkUsS0FBYSxFQUFFLEtBQWEsRUFDNUIsYUFBcUIsRUFBRSxhQUFxQixFQUM1QyxDQUFDLEVBQUUsR0FBRyxHQUFXLEVBQUUsQ0FBQztJQUV4QixLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEQsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztJQUU1QyxJQUFHLFFBQVEsQ0FBQyxJQUFJLEtBQUssZUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNuQyxLQUFLLEdBQUcsZUFBZSxDQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7S0FDL0M7SUFFRCxLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztRQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsSUFBRyxLQUFLLEVBQUU7UUFDTixLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztZQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RCO0tBQ0o7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUEzQkQsZ0NBMkJDO0FBR0Q7Ozs7O0dBS0c7QUFDSCxTQUFTLGVBQWUsQ0FBQyxJQUFhLEVBQUUsUUFBYyxFQUFFLGNBQXNCO0lBQzFFLElBQUksQ0FBQyxHQUFlLElBQUksQ0FBQyxVQUFVLEVBQy9CLElBQUksR0FBVyxJQUFJLENBQUMsSUFBSSxFQUN4QixNQUFjLEVBQ2QsSUFBVSxFQUNWLFFBQWdCLEVBQ2hCLFdBQVcsR0FBVyxRQUFRLEVBQzlCLEdBQVcsRUFDWCxPQUFPLEdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFDakUsS0FBSyxHQUFXLENBQUMsQ0FBQyxFQUNsQixRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksS0FBSyxlQUFRLENBQUMsT0FBTyxFQUFDLENBQVcsUUFBUyxDQUFDLFVBQVUsRUFBQyxDQUFTLFFBQVEsRUFDL0YsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUV6QyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5QixNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVmLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVyQyxJQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUN2QixTQUFTO1NBQ1o7UUFFRCxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZGLElBQUcsUUFBUSxHQUFHLFdBQVcsRUFBRTtZQUN2QixXQUFXLEdBQUcsUUFBUSxDQUFDO1lBQ3ZCLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDYjtRQUVELE9BQU8sR0FBRyxHQUFHLENBQUM7S0FDakI7SUFFRCxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUN6QyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNyQixTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVCLFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7SUFDcEMsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBRWxDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7SUFDckMsU0FBUyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDOUIsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBRW5DLE9BQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQyIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIGJvZHlUeXBlIH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tIFwiLi4vYm9keS9jaXJjbGVcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuLi9ib2R5L3BvbHlnb25cIjtcclxuaW1wb3J0IHsgQXhpcywgVmVydGV4TGlzdCB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgVmVjdG9yLCBfdGVtcFZlY3RvcjEsIF90ZW1wVmVjdG9yMiwgX3RlbXBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBheGVzRmlsdGVyKHBvbHk6IFBvbHlnb24sIGdlb21ldHJ5OiBCb2R5KTogQXhpc1tdIHtcclxuICAgIGxldCBjZW50cm9pZFZlY3RvciA9IGdlb21ldHJ5LnBvc2l0aW9uLnN1Yihwb2x5LnBvc2l0aW9uLCBfdGVtcFZlY3RvcjEpLFxyXG4gICAgICAgIGF4ZXNBOiBBeGlzW10sIGF4ZXNCOiBBeGlzW10sXHJcbiAgICAgICAgc3VwcG9ydEluZGV4QTogbnVtYmVyLCBzdXBwb3J0SW5kZXhCOiBudW1iZXIsXHJcbiAgICAgICAgaSwgcmVzOiBBeGlzW10gPSBbXTtcclxuXHJcbiAgICBheGVzQSA9IGZpbmRDbG9zZXN0QXhlcyhwb2x5LCBnZW9tZXRyeSwgY2VudHJvaWRWZWN0b3IpO1xyXG4gICAgc3VwcG9ydEluZGV4QSA9IGF4ZXNBWzBdLnN1cHBvcnRWZXJ0ZXhJbmRleDtcclxuXHJcbiAgICBpZihnZW9tZXRyeS50eXBlID09PSBib2R5VHlwZS5wb2x5Z29uKSB7XHJcbiAgICAgICAgYXhlc0IgPSBmaW5kQ2xvc2VzdEF4ZXMoPFBvbHlnb24+Z2VvbWV0cnksIHBvbHksIGNlbnRyb2lkVmVjdG9yLmludihjZW50cm9pZFZlY3RvcikpO1xyXG4gICAgICAgIHN1cHBvcnRJbmRleEIgPSBheGVzQlswXS5zdXBwb3J0VmVydGV4SW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGkgPSAwOyBpIDwgYXhlc0EubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBheGVzQVtpXS5vcHBvc2l0ZVZlcnRleEluZGV4ID0gc3VwcG9ydEluZGV4QjtcclxuICAgICAgICByZXMucHVzaChheGVzQVtpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoYXhlc0IpIHtcclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBheGVzQi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBheGVzQltpXS5vcHBvc2l0ZVZlcnRleEluZGV4ID0gc3VwcG9ydEluZGV4QTtcclxuICAgICAgICAgICAgcmVzLnB1c2goYXhlc0JbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBwb2x5IFxyXG4gKiBAcGFyYW0gZ2VvbWV0cnlcclxuICogQHBhcmFtIGNlbnRyb2lkVmVjdG9yIFxyXG4gKiBAcGFyYW0gb3Bwb3NpdGVDZW50cm9pZFxyXG4gKi9cclxuZnVuY3Rpb24gZmluZENsb3Nlc3RBeGVzKHBvbHk6IFBvbHlnb24sIGdlb21ldHJ5OiBCb2R5LCBjZW50cm9pZFZlY3RvcjogVmVjdG9yKTogQXhpc1tdIHtcclxuICAgIGxldCB2OiBWZXJ0ZXhMaXN0ID0gcG9seS52ZXJ0ZXhMaXN0LFxyXG4gICAgICAgIGF4ZXM6IEF4aXNbXSA9IHBvbHkuYXhlcyxcclxuICAgICAgICB2ZXJ0ZXg6IFZlY3RvcixcclxuICAgICAgICBheGlzOiBBeGlzLFxyXG4gICAgICAgIGRpc3RhbmNlOiBudW1iZXIsXHJcbiAgICAgICAgbWluRGlzdGFuY2U6IG51bWJlciA9IEluZmluaXR5LFxyXG4gICAgICAgIGRvdDogbnVtYmVyLFxyXG4gICAgICAgIGxhc3REb3Q6IG51bWJlciA9IGF4ZXNbYXhlcy5sZW5ndGggLSAxXS52YWx1ZS5kb3QoY2VudHJvaWRWZWN0b3IpLFxyXG4gICAgICAgIGluZGV4OiBudW1iZXIgPSAtMSxcclxuICAgICAgICBvcHBvc2l0ZSA9IGdlb21ldHJ5LnR5cGUgPT09IGJvZHlUeXBlLnBvbHlnb24/ICg8UG9seWdvbj5nZW9tZXRyeSkudmVydGV4TGlzdDogPENpcmNsZT5nZW9tZXRyeSxcclxuICAgICAgICBvcHBvc2l0ZUNlbnRyb2lkID0gZ2VvbWV0cnkucG9zaXRpb247XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHYubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2ZXJ0ZXggPSB2W2ldO1xyXG4gICAgICAgIGF4aXMgPSBheGVzW2ldO1xyXG5cclxuICAgICAgICBkb3QgPSBheGlzLnZhbHVlLmRvdChjZW50cm9pZFZlY3Rvcik7XHJcbiBcclxuICAgICAgICBpZihkb3QgPCAwICYmIGxhc3REb3QgPCAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGlzdGFuY2UgPSAodmVydGV4LnggLSBvcHBvc2l0ZUNlbnRyb2lkLngpICoqIDIgKyAodmVydGV4LnkgLSBvcHBvc2l0ZUNlbnRyb2lkLnkpICoqIDI7XHJcblxyXG4gICAgICAgIGlmKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgIH1cclxuIFxyXG4gICAgICAgIGxhc3REb3QgPSBkb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHByZXYgPSBpbmRleCA+IDA/IGluZGV4IC0gMTogdi5sZW5ndGggLSAxLFxyXG4gICAgICAgIHByZXZBeGlzID0gYXhlc1twcmV2XSxcclxuICAgICAgICBpbmRleEF4aXMgPSBheGVzW2luZGV4XTtcclxuXHJcbiAgICBwcmV2QXhpcy5zdXBwb3J0VmVydGV4SW5kZXggPSBpbmRleDtcclxuICAgIHByZXZBeGlzLm9wcG9zaXRlID0gb3Bwb3NpdGU7XHJcbiAgICBwcmV2QXhpcy5vcmlnaW4gPSBwb2x5LnZlcnRleExpc3Q7XHJcblxyXG4gICAgaW5kZXhBeGlzLnN1cHBvcnRWZXJ0ZXhJbmRleCA9IGluZGV4O1xyXG4gICAgaW5kZXhBeGlzLm9wcG9zaXRlID0gb3Bwb3NpdGU7XHJcbiAgICBpbmRleEF4aXMub3JpZ2luID0gcG9seS52ZXJ0ZXhMaXN0O1xyXG4gICAgXHJcbiAgICByZXR1cm4gW3ByZXZBeGlzLCBpbmRleEF4aXNdO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.vClipCircle = exports.vClip = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst contact_1 = __webpack_require__(4);\r\nconst arcs_1 = __webpack_require__(6);\r\n/**\r\n * 寻找 incident edge\r\n * @param oppositeVertexList\r\n * @param normal\r\n * @param oppositeClosestIndex\r\n */\r\nfunction findIncidentEdge(oppositeVertexList, normal, oppositeClosestIndex) {\r\n    let prev, cur, next, index;\r\n    if (oppositeClosestIndex === null) {\r\n        let min = Infinity, dot;\r\n        for (let i = 0; i < oppositeVertexList.length; i++) {\r\n            dot = oppositeVertexList[i].dot(normal);\r\n            if (dot < min) {\r\n                min = dot;\r\n                oppositeClosestIndex = i;\r\n            }\r\n        }\r\n    }\r\n    index = oppositeClosestIndex;\r\n    let prevIndex = index === 0 ? oppositeVertexList.length - 1 : index - 1, nextIndex = (index + 1) % oppositeVertexList.length, edge = { start: null, end: null, index: [-1, -1] };\r\n    cur = oppositeVertexList[index];\r\n    prev = oppositeVertexList[prevIndex];\r\n    next = oppositeVertexList[nextIndex];\r\n    cur.sub(prev, vector_1._tempVector1);\r\n    cur.sub(next, vector_1._tempVector2);\r\n    let d1 = Math.abs(vector_1._tempVector1.dot(normal)), d2 = Math.abs(vector_1._tempVector2.dot(normal));\r\n    if (d1 < d2) {\r\n        edge.start = prev;\r\n        edge.end = cur;\r\n        edge.index = [prevIndex, index];\r\n    }\r\n    else {\r\n        edge.start = cur;\r\n        edge.end = next;\r\n        edge.index = [index, nextIndex];\r\n    }\r\n    return edge;\r\n}\r\n/**\r\n * 筛选两边\r\n * @param incEdge\r\n * @param refV\r\n * @param d\r\n */\r\nfunction clipSide(incEdge, refV, d) {\r\n    let d1 = incEdge.start.dot(refV) - d, d2 = incEdge.end.dot(refV) - d;\r\n    if (d1 >= 0) {\r\n        return 0;\r\n    }\r\n    if (d2 >= 0) {\r\n        return 1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * V-Clip 算法寻找碰撞点\r\n * 详见：https://github.com/phenomLi/Blog/issues/42\r\n * @param poly1\r\n * @param poly2\r\n * @param normal\r\n * @param depth\r\n */\r\nfunction vClip(minOverlap) {\r\n    let axis = minOverlap.axis, normal = axis.value, incEdge, refEdge, ids = [], contacts = [];\r\n    incEdge = findIncidentEdge(axis.opposite, normal, minOverlap.oppositeClosestIndex);\r\n    refEdge = axis.edge;\r\n    // ------------------------------------- 首先向 refEdge 的内部进行筛选 -------------------\r\n    let refV = refEdge.end.sub(refEdge.start).nol(), refN = normal, d = refEdge.start.dot(refN), d1 = incEdge.start.dot(refN) - d, d2 = incEdge.end.dot(refN) - d, incVertex = [], removeIndex = -1;\r\n    if (d1 <= 0) {\r\n        ids[0] = [incEdge.index[0], incEdge.index[0]];\r\n        incVertex[0] = incEdge.start;\r\n    }\r\n    if (d2 <= 0) {\r\n        ids[1] = [incEdge.index[1], incEdge.index[1]];\r\n        incVertex[1] = incEdge.end;\r\n    }\r\n    // ------------------------------------- 接下来进行两边筛选 -------------------\r\n    removeIndex = clipSide(incEdge, refV, refEdge.end.dot(refV));\r\n    if (removeIndex !== -1 && incVertex[removeIndex]) {\r\n        ids[removeIndex][0] = refEdge.index[1];\r\n        incVertex[removeIndex] = refEdge.end;\r\n    }\r\n    removeIndex = clipSide(incEdge, refV.inv(refV), refEdge.start.dot(refV));\r\n    if (removeIndex !== -1 && incVertex[removeIndex]) {\r\n        ids[removeIndex][0] = refEdge.index[0];\r\n        incVertex[removeIndex] = refEdge.start;\r\n    }\r\n    if (incVertex[0]) {\r\n        contacts.push(contact_1.ContactConstraint.create(ids[0], incVertex[0], Math.abs(d1)));\r\n    }\r\n    if (incVertex[1]) {\r\n        contacts.push(contact_1.ContactConstraint.create(ids[1], incVertex[1], Math.abs(d2)));\r\n    }\r\n    return contacts;\r\n}\r\nexports.vClip = vClip;\r\n/**\r\n * 多边形与圆形的碰撞点求解算法\r\n * @param polygon\r\n * @param circle\r\n * @param normal\r\n * @param depth\r\n */\r\nfunction vClipCircle(polygon, circle, normal, depth) {\r\n    let incEdge = findIncidentEdge(polygon.vertexList, normal, null), vertex;\r\n    if (arcs_1.Arcs.isContains(circle, incEdge.start)) {\r\n        return [contact_1.ContactConstraint.create(null, incEdge.start, depth)];\r\n    }\r\n    if (arcs_1.Arcs.isContains(circle, incEdge.end)) {\r\n        return [contact_1.ContactConstraint.create(null, incEdge.end, depth)];\r\n    }\r\n    vertex = circle.position.loc(normal, circle.radius - depth / 2);\r\n    return [contact_1.ContactConstraint.create(null, vertex, depth)];\r\n}\r\nexports.vClipCircle = vClipCircle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},,function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Sleeping = void 0;\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 休眠管理器\r\n */\r\nclass Sleeping {\r\n    constructor(opt) {\r\n        this.sleepDelayThreshold = 60;\r\n        this.sleepMotionThreshold = 0.0006;\r\n        this.wakeMotionThreshold = 0.7;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 使刚体睡眠\r\n     * @param body\r\n     */\r\n    sleep(body) {\r\n        if (body.kinetic)\r\n            return;\r\n        body.sleeping = true;\r\n        body.sleepCounter = this.sleepDelayThreshold;\r\n        body.velocity.x = 0;\r\n        body.velocity.y = 0;\r\n        body.angularVelocity = 0;\r\n        body.motion = 0;\r\n        body.sleepStart();\r\n        if (body.parts[0] !== body) {\r\n            for (let i = 0; i < body.parts.length; i++) {\r\n                this.sleep(body.parts[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 唤醒刚体\r\n     * @param body\r\n     */\r\n    wake(body) {\r\n        if (body.static)\r\n            return;\r\n        body.sleeping = false;\r\n        body.sleepCounter = 0;\r\n        body.sleepEnd();\r\n        if (body.parts[0] !== body) {\r\n            for (let i = 0; i < body.parts.length; i++) {\r\n                this.wake(body.parts[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 改变刚体的状态，使其唤醒或休眠\r\n     * @param bodies\r\n     */\r\n    update(bodies) {\r\n        let body, i;\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            let motion = body.motion;\r\n            // 若刚体合外力不为0，则唤醒\r\n            if (body.force.x !== 0 || body.force.y !== 0) {\r\n                this.wake(body);\r\n                continue;\r\n            }\r\n            // 若刚体已经休眠，则返回\r\n            if (body.sleeping)\r\n                continue;\r\n            // 若刚体动量 < 休眠阈值，则刚体休眠计算 + 1\r\n            if (motion < this.sleepMotionThreshold) {\r\n                body.sleepCounter += 1;\r\n                // 若刚体休眠计数器达到休眠阈值，则进行休眠\r\n                if (body.sleepCounter >= this.sleepDelayThreshold) {\r\n                    this.sleep(body);\r\n                }\r\n            }\r\n            else {\r\n                if (body.sleepCounter > 0) {\r\n                    body.sleepCounter -= 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 刚体碰撞后，判断是否需要唤醒\r\n     * @param manifolds\r\n     */\r\n    afterCollision(manifolds) {\r\n        let manifold, bodyA, bodyB;\r\n        // wake up bodies involved in collisions\r\n        for (var i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            bodyA = manifold.bodyA;\r\n            bodyB = manifold.bodyB;\r\n            // 若A为休眠状态且B的动量大于休眠阈值，唤醒A\r\n            if (bodyB.kinetic || bodyA.sleeping && bodyB.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyA);\r\n                continue;\r\n            }\r\n            // B同理上面\r\n            if (bodyA.kinetic || bodyB.sleeping && bodyA.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyB);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Sleeping = Sleeping;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ManifoldTable = void 0;\r\nconst manifold_1 = __webpack_require__(7);\r\nconst util_1 = __webpack_require__(1);\r\nclass ManifoldTable {\r\n    constructor(opt) {\r\n        this.enableCache = false;\r\n        this.manifoldRemoveThreshold = 1000;\r\n        this.table = {};\r\n        this.list = [];\r\n        this.collisionStart = [];\r\n        this.collisionEnd = [];\r\n        this.collisionActive = [];\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 更新所有流形\r\n     * @param collisions\r\n     * @param timeStamp\r\n     */\r\n    update(collisions, timeStamp) {\r\n        let manifold, id, collision, i;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n        // 清空确认激活状态\r\n        for (i = 0; i < this.list.length; i++) {\r\n            this.list[i].confirmedActive = false;\r\n        }\r\n        for (i = 0; i < collisions.length; i++) {\r\n            collision = collisions[i];\r\n            // 只有真实发生碰撞的碰撞对才会更新对应的流形\r\n            if (collision.collide) {\r\n                id = util_1.Util.compositeId(collision.partA.id, collision.partB.id);\r\n                manifold = this.table[id];\r\n                // 若对应流形存在\r\n                if (manifold) {\r\n                    // 若流形上一刻已经被激活\r\n                    if (manifold.isActive) {\r\n                        this.collisionActive.push(manifold);\r\n                    }\r\n                    // 否则表明该流形第一次发生碰撞\r\n                    else {\r\n                        this.collisionStart.push(manifold);\r\n                    }\r\n                    manifold.update(collision, timeStamp);\r\n                    manifold.confirmedActive = true;\r\n                }\r\n                // 若不存在，则创建对应流形\r\n                else {\r\n                    manifold = new manifold_1.Manifold(collision, timeStamp);\r\n                    this.table[id] = manifold;\r\n                    this.list.push(manifold);\r\n                    this.collisionStart.push(manifold);\r\n                }\r\n                collision.bodyA.onCollide(collision.bodyB);\r\n                collision.bodyB.onCollide(collision.bodyA);\r\n            }\r\n        }\r\n        // 遍历查找上一次发生碰撞且当前没有发生碰撞的流形\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            collision = manifold.collision;\r\n            // 将其激活状态取消\r\n            if (manifold.isActive && !manifold.confirmedActive) {\r\n                manifold.toggleActive(false, timeStamp);\r\n                // 标记为碰撞结束\r\n                this.collisionEnd.push(manifold);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 过滤超时的碰撞流形\r\n     * @param timeStamp\r\n     */\r\n    filter(timeStamp) {\r\n        let manifold, collision, i;\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            collision = manifold.collision;\r\n            // 若流形的两刚体有其一处于休眠状态，更新时间，不清除\r\n            if (manifold.bodyA.sleeping || manifold.bodyB.sleeping) {\r\n                manifold.timeUpdated = timeStamp;\r\n                continue;\r\n            }\r\n            // 若流形上次更新的时间离现在已经大于设定阈值，则需要清除\r\n            if (timeStamp - manifold.timeUpdated > this.manifoldRemoveThreshold) {\r\n                let bodyA = collision.bodyA, bodyB = collision.bodyB;\r\n                delete bodyA.contactBodies[bodyB.stringId];\r\n                delete bodyB.contactBodies[bodyA.stringId];\r\n                delete this.table[manifold.id];\r\n                this.list.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 清空流形表和队列\r\n     */\r\n    clear() {\r\n        this.table = {};\r\n        this.list.length = 0;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n    }\r\n}\r\nexports.ManifoldTable = ManifoldTable;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL21hbmlmb2xkVGFibGUudHM/MzVjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwQ0FBaUQ7QUFDakQsc0NBQXNDO0FBTXRDLE1BQWEsYUFBYTtJQWdCdEIsWUFBWSxHQUFjO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUUxQixXQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUF1QixFQUFFLFNBQWlCO1FBQzdDLElBQUksUUFBa0IsRUFDbEIsRUFBVSxFQUNWLFNBQW9CLEVBQ3BCLENBQUMsQ0FBQztRQUVOLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWhDLFdBQVc7UUFDWCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztTQUN4QztRQUVELEtBQUksQ0FBQyxHQUFHLENBQUMs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QUFDLHVCQUF1QixFQUFFO2dCQUNoRSxJQUFJLEtBQUssR0FBUyxTQUFTLENBQUMsS0FBSyxFQUM3QixLQUFLLEdBQVMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFFbEMsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixDQUFDLEVBQUUsQ0FBQzthQUNQO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQTlJRCxzQ0E4SUMiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbmdpbmVPcHQgfSBmcm9tIFwiLi4vY29yZS9lbmdpbmVcIjtcclxuaW1wb3J0IHsgTWFuaWZvbGQsIENvbGxpc2lvbiB9IGZyb20gXCIuL21hbmlmb2xkXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNYW5pZm9sZFRhYmxlIHtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+e8k+WtmFxyXG4gICAgZW5hYmxlQ2FjaGU6IGJvb2xlYW47XHJcbiAgICAvLyDnvJPlrZjnp7vpmaTml7bpl7TpmIjlgLxcclxuICAgIG1hbmlmb2xkUmVtb3ZlVGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICAvLyDmtYHlvaLooahcclxuICAgIHRhYmxlOiB7W2tleTogc3RyaW5nXTogTWFuaWZvbGR9O1xyXG4gICAgLy8g5rWB5b2i6Zif5YiXXHJcbiAgICBsaXN0OiBNYW5pZm9sZFtdO1xyXG4gICAgLy8g5byA5aeL56Kw5pKe55qE56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25TdGFydDogTWFuaWZvbGRbXTtcclxuICAgIC8vIOa/gOa0u+eisOaSnueahOeisOaSnuWvuVxyXG4gICAgY29sbGlzaW9uQWN0aXZlOiBNYW5pZm9sZFtdO1xyXG4gICAgLy8g57uT5p2f56Kw5pKe55qE56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25FbmQ6IE1hbmlmb2xkW107XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLmVuYWJsZUNhY2hlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYW5pZm9sZFJlbW92ZVRocmVzaG9sZCA9IDEwMDA7XHJcbiAgICAgICAgdGhpcy50YWJsZSA9IHt9O1xyXG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkVuZCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQWN0aXZlID0gW107XHJcblxyXG4gICAgICAgIFV0aWwubWVyZ2UodGhpcywgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOaJgOaciea1geW9olxyXG4gICAgICogQHBhcmFtIGNvbGxpc2lvbnMgXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIFxyXG4gICAgICovXHJcbiAgICB1cGRhdGUoY29sbGlzaW9uczogQ29sbGlzaW9uW10sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG1hbmlmb2xkOiBNYW5pZm9sZCxcclxuICAgICAgICAgICAgaWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgY29sbGlzaW9uOiBDb2xsaXNpb24sXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkVuZC5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIC8vIOa4heepuuehruiupOa/gOa0u+eKtuaAgVxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0W2ldLmNvbmZpcm1lZEFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY29sbGlzaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xyXG5cclxuICAgICAgICAgICAgLy8g5Y+q5pyJ55yf5a6e5Y+R55Sf56Kw5pKe55qE56Kw5pKe5a+55omN5Lya5pu05paw5a+55bqU55qE5rWB5b2iXHJcbiAgICAgICAgICAgIGlmKGNvbGxpc2lvbi5jb2xsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZCA9IFV0aWwuY29tcG9zaXRlSWQoY29sbGlzaW9uLnBhcnRBLmlkLCBjb2xsaXNpb24ucGFydEIuaWQpO1xyXG4gICAgICAgICAgICAgICAgbWFuaWZvbGQgPSB0aGlzLnRhYmxlW2lkXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoi6Xlr7nlupTmtYHlvaLlrZjlnKhcclxuICAgICAgICAgICAgICAgIGlmKG1hbmlmb2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6Iul5rWB5b2i5LiK5LiA5Yi75bey57uP6KKr5r+A5rS7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobWFuaWZvbGQuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25BY3RpdmUucHVzaChtYW5pZm9sZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWQpuWImeihqOaYjuivpea1geW9ouesrOS4gOasoeWPkeeUn+eisOaSnlxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxpc2lvblN0YXJ0LnB1c2gobWFuaWZvbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFuaWZvbGQudXBkYXRlKGNvbGxpc2lvbiwgdGltZVN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZC5jb25maXJtZWRBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6Iul5LiN5a2Y5Zyo77yM5YiZ5Yib5bu65a+55bqU5rWB5b2iXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZCA9IG5ldyBNYW5pZm9sZChjb2xsaXNpb24sIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YWJsZVtpZF0gPSBtYW5pZm9sZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChtYW5pZm9sZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQucHVzaChtYW5pZm9sZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHlBLm9uQ29sbGlkZShjb2xsaXNpb24uYm9keUIpO1xyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHlCLm9uQ29sbGlkZShjb2xsaXNpb24uYm9keUEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDpgY3ljobmn6Xmib7kuIrkuIDmrKHlj5HnlJ/norDmkp7kuJTlvZPliY3msqHmnInlj5HnlJ/norDmkp7nmoTmtYHlvaJcclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWFuaWZvbGQgPSB0aGlzLmxpc3RbaV07XHJcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IG1hbmlmb2xkLmNvbGxpc2lvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIOWwhuWFtua/gOa0u+eKtuaAgeWPlua2iFxyXG4gICAgICAgICAgICBpZihtYW5pZm9sZC5pc0FjdGl2ZSAmJiAhbWFuaWZvbGQuY29uZmlybWVkQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBtYW5pZm9sZC50b2dnbGVBY3RpdmUoZmFsc2UsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAvLyDmoIforrDkuLrnorDmkp7nu5PmnZ9cclxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uRW5kLnB1c2gobWFuaWZvbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L+H5ruk6LaF5pe255qE56Kw5pKe5rWB5b2iXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIFxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIodGltZVN0YW1wOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbWFuaWZvbGQ6IE1hbmlmb2xkLFxyXG4gICAgICAgICAgICBjb2xsaXNpb246IENvbGxpc2lvbixcclxuICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1hbmlmb2xkID0gdGhpcy5saXN0W2ldO1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBtYW5pZm9sZC5jb2xsaXNpb247XHJcblxyXG4gICAgICAgICAgICAvLyDoi6XmtYHlvaLnmoTkuKTliJrkvZPmnInlhbbkuIDlpITkuo7kvJHnnKDnirbmgIHvvIzmm7TmlrDml7bpl7TvvIzkuI3muIXpmaRcclxuICAgICAgICAgICAgaWYobWFuaWZvbGQuYm9keUEuc2xlZXBpbmcgfHwgbWFuaWZvbGQuYm9keUIuc2xlZXBpbmcpIHtcclxuICAgICAgICAgICAgICAgIG1hbmlmb2xkLnRpbWVVcGRhdGVkID0gdGltZVN0YW1wO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOiLpea1geW9ouS4iuasoeabtOaWsOeahOaXtumXtOemu+eOsOWcqOW3sue7j+Wkp+S6juiuvuWumumYiOWAvO+8jOWImemcgOimgea4hemZpFxyXG4gICAgICAgICAgICBpZih0aW1lU3RhbXAgLSBtYW5pZm9sZC50aW1lVXBkYXRlZCA+IHRoaXMubWFuaWZvbGRSZW1vdmVUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBib2R5QTogQm9keSA9IGNvbGxpc2lvbi5ib2R5QSxcclxuICAgICAgICAgICAgICAgICAgICBib2R5QjogQm9keSA9IGNvbGxpc2lvbi5ib2R5QjtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keUEuY29udGFjdEJvZGllc1tib2R5Qi5zdHJpbmdJZF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keUIuY29udGFjdEJvZGllc1tib2R5QS5zdHJpbmdJZF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50YWJsZVttYW5pZm9sZC5pZF07XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4heepuua1geW9ouihqOWSjOmYn+WIl1xyXG4gICAgICovXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLnRhYmxlID0ge307XHJcbiAgICAgICAgdGhpcy5saXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25TdGFydC5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BodiesFactory = void 0;\r\nconst circle_1 = __webpack_require__(8);\r\nconst polygon_1 = __webpack_require__(9);\r\nconst rect_1 = __webpack_require__(23);\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\nconst composite_1 = __webpack_require__(24);\r\nconst vertices_1 = __webpack_require__(3);\r\nclass BodiesFactory {\r\n    /**\r\n     * 创造圆形\r\n     * @param x x\r\n     * @param y y\r\n     * @param radius 半径\r\n     * @param opt 配置项\r\n     */\r\n    Circle(x, y, radius, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            radius: radius\r\n        });\r\n        return new circle_1.Circle(opt);\r\n        ;\r\n    }\r\n    /**\r\n     * 创造多边形\r\n     * @param x x\r\n     * @param y y\r\n     * @param v 顶点集\r\n     * @param opt 配置项\r\n     */\r\n    Polygon(x, y, v, opt) {\r\n        let vertices = v.map(vertex => new vector_1.Vector(vertex[0], vertex[1])), options = opt || { origin: new vector_1.Vector(x, y) };\r\n        vertices_1.Vertices.filterCollinearVertex(vertices);\r\n        // 若输入的顶点列表是凹多边形，则将其拆分为由凸多边形组合成的组合图形\r\n        if (vertices_1.Vertices.isConcave(vertices)) {\r\n            let vertexLists = vertices_1.Vertices.split(vertices), polygons = [], composite;\r\n            for (let i = 0; i < vertexLists.length; i++) {\r\n                polygons.push(new polygon_1.Polygon({\r\n                    origin: new vector_1.Vector(x, y),\r\n                    vertices: vertexLists[i]\r\n                }));\r\n            }\r\n            composite = new composite_1.Composite(Object.assign(Object.assign({}, options), { bodies: polygons, useParentProps: true }));\r\n            return composite;\r\n        }\r\n        else {\r\n            util_1.Util.extend(options, {\r\n                origin: new vector_1.Vector(x, y),\r\n                vertices\r\n            });\r\n            return new polygon_1.Polygon(options);\r\n        }\r\n    }\r\n    /**\r\n     * 创造矩形\r\n     * @param x x\r\n     * @param y y\r\n     * @param width 宽\r\n     * @param height 高\r\n     * @param opt 配置项\r\n     */\r\n    Rect(x, y, width, height, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            width,\r\n            height\r\n        });\r\n        return new rect_1.Rect(opt);\r\n    }\r\n    /**\r\n     * 创造复合图形\r\n     * @param bodies\r\n     */\r\n    Composite(bodies, opt) {\r\n        opt = opt || {};\r\n        opt.bodies = bodies;\r\n        return new composite_1.Composite(opt);\r\n    }\r\n}\r\nexports.BodiesFactory = BodiesFactory;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9ib2RpZXNGYWN0b3J5LnRzPzE2ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQW1EO0FBQ25ELHlDQUFzRDtBQUN0RCx1Q0FBNkM7QUFDN0Msd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUN0Qyw0Q0FBNEQ7QUFFNUQsMENBQThDO0FBSTlDLE1BQWEsYUFBYTtJQUV0Qjs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjLEVBQUUsR0FBZTtRQUN4RCxHQUFHLEdBQUcsR0FBRyxJQUFlLEVBQUUsQ0FBQztRQUUzQixXQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNiLE1BQU0sRUFBRSxJQUFJLGVBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sRUFBRSxNQUFNO1NBQ2pCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxlQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBQSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxPQUFPLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFrQixFQUFFLEdBQStCO1FBQzdFLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDNUQsT0FBTyxHQUFHLEdBQUcsSUFBK0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFN0UsbUJBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6QyxvQ0FBb0M7UUFDcEMsSUFBRyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QixJQUFJLFdBQVcsR0FBRyxtQkFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFDdEMsUUFBUSxHQUFjLEVBQUUsRUFDeEIsU0FBb0IsQ0FBQztZQUV6QixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFPLENBQUM7b0JBQ3RCLE1BQU0sRUFBRSxJQUFJLGVBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUN4QixRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztpQkFDM0IsQ0FBQyxDQUFDLENBQUM7YUFDUDtZQUVELFNBQVMsR0FBRyxJQUFJLHFCQUFTLGlDQUNsQixPQUFPLEtBQ1YsTUFBTSxFQUFFLFFBQVEsRUFDaEIsY0FBYyxFQUFFLElBQUksSUFDdEIsQ0FBQztZQUVILE9BQU8sU0FBUyxDQUFDO1NBQ3BCO2FBQ0k7WUFDRCxXQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDakIsTUFBTSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3hCLFFBQVE7YUFDWCxDQUFDLENBQUM7WUFFSCxPQUFPLElBQUksaUJBQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMvQjtJQUNMLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBSSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxHQUFhO1FBQ25FLEdBQUcsR0FBRyxHQUFHLElBQWEsRUFBRSxDQUFDO1FBRXpCLFdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2IsTUFBTSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsS0FBSztZQUNMLE1BQU07U0FDVCxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxTQUFTLENBQUMsTUFBYyxFQUFFLEdBQWtCO1FBQ3hDLEdBQUcsR0FBRyxHQUFHLElBQWtCLEVBQUUsQ0FBQztRQUM5QixHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNwQixPQUFPLElBQUkscUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUE3RkQsc0NBNkZDIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2lyY2xlLCBDaXJjbGVPcHQgfSBmcm9tIFwiLi4vYm9keS9jaXJjbGVcIjtcclxuaW1wb3J0IHsgUG9seWdvbiwgUG9seWdvbk9wdCB9IGZyb20gXCIuLi9ib2R5L3BvbHlnb25cIjtcclxuaW1wb3J0IHsgUmVjdCwgUmVjdE9wdCB9IGZyb20gXCIuLi9ib2R5L3JlY3RcIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQ29tcG9zaXRlLCBDb21wb3NpdGVPcHQgfSBmcm9tIFwiLi4vYm9keS9jb21wb3NpdGVcIjtcclxuaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuaW1wb3J0IHsgVmVydGljZXMgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCb2RpZXNGYWN0b3J5IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+mAoOWchuW9olxyXG4gICAgICogQHBhcmFtIHggeFxyXG4gICAgICogQHBhcmFtIHkgeVxyXG4gICAgICogQHBhcmFtIHJhZGl1cyDljYrlvoQgXHJcbiAgICAgKiBAcGFyYW0gb3B0IOmFjee9rumhuVxyXG4gICAgICovXHJcbiAgICBDaXJjbGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBvcHQ/OiBDaXJjbGVPcHQpOiBDaXJjbGUge1xyXG4gICAgICAgIG9wdCA9IG9wdCB8fCA8Q2lyY2xlT3B0Pnt9O1xyXG5cclxuICAgICAgICBVdGlsLmV4dGVuZChvcHQsIHtcclxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yKHgsIHkpLFxyXG4gICAgICAgICAgICByYWRpdXM6IHJhZGl1c1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IENpcmNsZShvcHQpOztcclxuICAgIH0gICBcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+mAoOWkmui+ueW9olxyXG4gICAgICogQHBhcmFtIHggeFxyXG4gICAgICogQHBhcmFtIHkgeVxyXG4gICAgICogQHBhcmFtIHYg6aG254K56ZuGIFxyXG4gICAgICogQHBhcmFtIG9wdCDphY3nva7poblcclxuICAgICAqL1xyXG4gICAgUG9seWdvbih4OiBudW1iZXIsIHk6IG51bWJlciwgdjogQXJyYXk8bnVtYmVyW10+LCBvcHQ/OiBQb2x5Z29uT3B0ICYgQ29tcG9zaXRlT3B0KTogUG9seWdvbiB8IENvbXBvc2l0ZSB7XHJcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gdi5tYXAodmVydGV4ID0+IG5ldyBWZWN0b3IodmVydGV4WzBdLCB2ZXJ0ZXhbMV0pKSxcclxuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdCB8fCA8UG9seWdvbk9wdCAmIENvbXBvc2l0ZU9wdD57IG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSB9O1xyXG5cclxuICAgICAgICBWZXJ0aWNlcy5maWx0ZXJDb2xsaW5lYXJWZXJ0ZXgodmVydGljZXMpO1xyXG5cclxuICAgICAgICAvLyDoi6XovpPlhaXnmoTpobbngrnliJfooajmmK/lh7nlpJrovrnlvaLvvIzliJnlsIblhbbmi4bliIbkuLrnlLHlh7jlpJrovrnlvaLnu4TlkIjmiJDnmoTnu4TlkIjlm77lvaJcclxuICAgICAgICBpZihWZXJ0aWNlcy5pc0NvbmNhdmUodmVydGljZXMpKSB7XHJcbiAgICAgICAgICAgIGxldCB2ZXJ0ZXhMaXN0cyA9IFZlcnRpY2VzLnNwbGl0KHZlcnRpY2VzKSxcclxuICAgICAgICAgICAgICAgIHBvbHlnb25zOiBQb2x5Z29uW10gPSBbXSxcclxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZTogQ29tcG9zaXRlO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHZlcnRleExpc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwb2x5Z29ucy5wdXNoKG5ldyBQb2x5Z29uKHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW46IG5ldyBWZWN0b3IoeCwgeSksXHJcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXM6IHZlcnRleExpc3RzW2ldXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbXBvc2l0ZSA9IG5ldyBDb21wb3NpdGUoe1xyXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIGJvZGllczogcG9seWdvbnMsXHJcbiAgICAgICAgICAgICAgICB1c2VQYXJlbnRQcm9wczogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb21wb3NpdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBVdGlsLmV4dGVuZChvcHRpb25zLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW46IG5ldyBWZWN0b3IoeCwgeSksXHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvbHlnb24ob3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yib6YCg55+p5b2iXHJcbiAgICAgKiBAcGFyYW0geCB4IFxyXG4gICAgICogQHBhcmFtIHkgeVxyXG4gICAgICogQHBhcmFtIHdpZHRoIOWuvSBcclxuICAgICAqIEBwYXJhbSBoZWlnaHQg6auYXHJcbiAgICAgKiBAcGFyYW0gb3B0IOmFjee9rumhuVxyXG4gICAgICovXHJcbiAgICBSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3B0PzogUmVjdE9wdCk6IFJlY3Qge1xyXG4gICAgICAgIG9wdCA9IG9wdCB8fCA8UmVjdE9wdD57fTtcclxuXHJcbiAgICAgICAgVXRpbC5leHRlbmQob3B0LCB7XHJcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSxcclxuICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFJlY3Qob3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+mAoOWkjeWQiOWbvuW9olxyXG4gICAgICogQHBhcmFtIGJvZGllcyBcclxuICAgICAqL1xyXG4gICAgQ29tcG9zaXRlKGJvZGllczogQm9keVtdLCBvcHQ/OiBDb21wb3NpdGVPcHQpOiBDb21wb3NpdGUge1xyXG4gICAgICAgIG9wdCA9IG9wdCB8fCA8Q29tcG9zaXRlT3B0Pnt9O1xyXG4gICAgICAgIG9wdC5ib2RpZXMgPSBib2RpZXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb3NpdGUob3B0KTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 矩形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Rect = void 0;\r\nconst polygon_1 = __webpack_require__(9);\r\nconst vector_1 = __webpack_require__(0);\r\nclass Rect extends polygon_1.Polygon {\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n    getVertexList() {\r\n        let leftTop = this.origin.col(), rightTop = leftTop.add(new vector_1.Vector(this.width, 0)), rightBottom = leftTop.add(new vector_1.Vector(this.width, this.height)), leftBottom = leftTop.add(new vector_1.Vector(0, this.height));\r\n        return [leftTop, rightTop, rightBottom, leftBottom];\r\n    }\r\n    getArea() {\r\n        return this.width * this.height;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.add(new vector_1.Vector(this.width / 2, this.height / 2));\r\n    }\r\n    getInertia() {\r\n        return this.mass * (this.width * this.width + this.height * this.height) / 12;\r\n    }\r\n}\r\nexports.Rect = Rect;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9yZWN0LnRzPzJkYWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCx5Q0FBZ0Q7QUFDaEQsd0NBQXdDO0FBV3hDLE1BQWEsSUFBSyxTQUFRLGlCQUFPO0lBTTdCLFlBQVksR0FBWTtRQUNwQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQzNCLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDakQsV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDOUQsVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXpELE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2xGLENBQUM7Q0FDSjtBQTlCRCxvQkE4QkMiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog55+p5b2i5Yia5L2TXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgUG9seWdvbiwgUG9seWdvbk9wdCB9IGZyb20gXCIuL3BvbHlnb25cIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IFZlcnRleExpc3QgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVjdE9wdCBleHRlbmRzIFBvbHlnb25PcHQge1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlY3QgZXh0ZW5kcyBQb2x5Z29uIHtcclxuICAgIC8vIOWuvVxyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIC8vIOmrmFxyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBSZWN0T3B0KSB7XHJcbiAgICAgICAgc3VwZXIob3B0KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWZXJ0ZXhMaXN0KCk6IFZlcnRleExpc3Qge1xyXG4gICAgICAgIGxldCBsZWZ0VG9wID0gdGhpcy5vcmlnaW4uY29sKCksXHJcbiAgICAgICAgICAgIHJpZ2h0VG9wID0gbGVmdFRvcC5hZGQobmV3IFZlY3Rvcih0aGlzLndpZHRoLCAwKSksXHJcbiAgICAgICAgICAgIHJpZ2h0Qm90dG9tID0gbGVmdFRvcC5hZGQobmV3IFZlY3Rvcih0aGlzLndpZHRoLCB0aGlzLmhlaWdodCkpLFxyXG4gICAgICAgICAgICBsZWZ0Qm90dG9tID0gbGVmdFRvcC5hZGQobmV3IFZlY3RvcigwLCB0aGlzLmhlaWdodCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2xlZnRUb3AsIHJpZ2h0VG9wLCByaWdodEJvdHRvbSwgbGVmdEJvdHRvbV07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJlYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2VudHJvaWQoKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uYWRkKG5ldyBWZWN0b3IodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMikpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluZXJ0aWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXNzICogKHRoaXMud2lkdGggKiB0aGlzLndpZHRoICsgdGhpcy5oZWlnaHQgKiB0aGlzLmhlaWdodCkgLyAxMjtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Composite = void 0;\r\nconst bound_1 = __webpack_require__(5);\r\nconst Compose_1 = __webpack_require__(25);\r\nconst body_1 = __webpack_require__(2);\r\nclass Composite extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.composite);\r\n    }\r\n    // -------------------------- 内部方法 ------------------------\r\n    beforeInitializeProperties(opt) {\r\n        this.parts.length = 0;\r\n        for (let i = 0; i < opt.bodies.length; i++) {\r\n            this.parts.push(...opt.bodies[i].parts);\r\n        }\r\n        if (this.useParentProps === undefined) {\r\n            this.useParentProps = false;\r\n        }\r\n        if (!this.useParentProps) {\r\n            this.mass = Compose_1.Compose.getMass(this.parts);\r\n        }\r\n    }\r\n    afterInitializeProperties(opt) {\r\n        if (this.useParentProps) {\r\n            this.density = this.mass / this.area;\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                this.parts[i].mass = this.parts[i].area * this.density;\r\n                this.parts[i].friction = this.friction;\r\n                this.parts[i].restitution = this.restitution;\r\n            }\r\n            this.position = this.getCentroid();\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                this.parts[i].inertia = this.parts[i].getInertia(this.position);\r\n            }\r\n            this.inertia = this.getInertia();\r\n            this.invInertia = this.getInvInertia();\r\n        }\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            this.parts[i].rotateCenter = this.position;\r\n            this.parts[i].parent = this;\r\n            this.parts[i].static = this.static;\r\n            this.parts[i].kinetic = this.kinetic;\r\n            this.parts[i].mask = this.mask;\r\n        }\r\n    }\r\n    getArea() {\r\n        return Compose_1.Compose.getArea(this.parts);\r\n    }\r\n    getCentroid() {\r\n        return Compose_1.Compose.getCentroid(this.parts, this.mass);\r\n    }\r\n    getInertia() {\r\n        return Compose_1.Compose.getInertia(this.parts);\r\n    }\r\n    getBound() {\r\n        let firstChildBound = this.parts[0].bound, bound = new bound_1.Bound(firstChildBound.min, firstChildBound.max);\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            bound = this.parts[i].bound.union(bound);\r\n        }\r\n        return bound;\r\n    }\r\n    translate(dx, dy) {\r\n        let part;\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            part = this.parts[i];\r\n            part.position.x += dx;\r\n            part.position.y += dy;\r\n            part.translate(dx, dy);\r\n        }\r\n        this.bound.translate(dx, dy);\r\n    }\r\n    rotate(radian) {\r\n        let part;\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            part = this.parts[i];\r\n            part.rotation += radian;\r\n            part.position = part.position.rot(radian, this.position, part.position);\r\n            part.rotate(radian);\r\n        }\r\n        this.bound.updateByBounds(this.parts);\r\n    }\r\n    isContains(x, y) {\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            if (this.parts[i].isContains(x, y))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.Composite = Composite;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Compose = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nexports.Compose = {\r\n    /**\r\n     * 获取质量\r\n     * @param bodies\r\n     */\r\n    getMass(bodies) {\r\n        let totalMass = 0, body;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            totalMass += body.mass;\r\n        }\r\n        return totalMass;\r\n    },\r\n    /**\r\n     * 计算复合刚体的质心\r\n     * 参考：https://zhuanlan.zhihu.com/p/26395651\r\n     * @param composite\r\n     */\r\n    getCentroid(bodies, mass) {\r\n        let centroid = new vector_1.Vector(0, 0), body, i;\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            centroid.x += body.position.x * body.mass;\r\n            centroid.y += body.position.y * body.mass;\r\n        }\r\n        centroid.x /= mass;\r\n        centroid.y /= mass;\r\n        return centroid;\r\n    },\r\n    /**\r\n     * 计算复合刚体的质量\r\n     * @param composite\r\n     */\r\n    getArea(bodies) {\r\n        let totalArea = 0, body, i;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            totalArea += body.area;\r\n        }\r\n        return totalArea;\r\n    },\r\n    /**\r\n     * 获取转动惯量\r\n     * @param bodies\r\n     */\r\n    getInertia(bodies) {\r\n        let totalInertia = 0, body, i;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            totalInertia += body.inertia;\r\n        }\r\n        return totalInertia;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL0NvbXBvc2UudHM/NDcwMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFPM0IsZUFBTyxHQUFHO0lBRW5COzs7T0FHRztJQUNILE9BQU8sQ0FBQyxNQUFjO1FBQ2xCLElBQUksU0FBUyxHQUFXLENBQUMsRUFDckIsSUFBVSxDQUFDO1FBRWYsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixTQUFTLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztTQUMxQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQ3BDLElBQUksUUFBUSxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDM0IsSUFBVSxFQUFFLENBQVMsQ0FBQztRQUUxQixLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQixRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDMUMsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzdDO1FBRUQsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDbkIsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFFbkIsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxNQUFjO1FBQ2xCLElBQUksU0FBUyxHQUFXLENBQUMsRUFDckIsSUFBVSxFQUFFLENBQVMsQ0FBQztRQUUxQixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzFCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxNQUFjO1FBQ3JCLElBQUksWUFBWSxHQUFXLENBQUMsRUFDeEIsSUFBVSxFQUFFLENBQVMsQ0FBQztRQUUxQixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ2hDO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKLENBQUMiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IENvbXBvc2UgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5botKjph49cclxuICAgICAqIEBwYXJhbSBib2RpZXMgXHJcbiAgICAgKi9cclxuICAgIGdldE1hc3MoYm9kaWVzOiBCb2R5W10pOiBudW1iZXIge1xyXG4gICAgICAgIGxldCB0b3RhbE1hc3M6IG51bWJlciA9IDAsXHJcbiAgICAgICAgICAgIGJvZHk6IEJvZHk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcclxuICAgICAgICAgICAgdG90YWxNYXNzICs9IGJvZHkubWFzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0b3RhbE1hc3M7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X5aSN5ZCI5Yia5L2T55qE6LSo5b+DXHJcbiAgICAgKiDlj4LogIPvvJpodHRwczovL3podWFubGFuLnpoaWh1LmNvbS9wLzI2Mzk1NjUxXHJcbiAgICAgKiBAcGFyYW0gY29tcG9zaXRlIFxyXG4gICAgICovXHJcbiAgICBnZXRDZW50cm9pZChib2RpZXM6IEJvZHlbXSwgbWFzczogbnVtYmVyKTogVmVjdG9yIHtcclxuICAgICAgICBsZXQgY2VudHJvaWQgPSBuZXcgVmVjdG9yKDAsIDApLFxyXG4gICAgICAgICAgICBib2R5OiBCb2R5LCBpOiBudW1iZXI7XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgY2VudHJvaWQueCArPSBib2R5LnBvc2l0aW9uLnggKiBib2R5Lm1hc3M7XHJcbiAgICAgICAgICAgIGNlbnRyb2lkLnkgKz0gYm9keS5wb3NpdGlvbi55ICogYm9keS5tYXNzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2VudHJvaWQueCAvPSBtYXNzO1xyXG4gICAgICAgIGNlbnRyb2lkLnkgLz0gbWFzcztcclxuXHJcbiAgICAgICAgcmV0dXJuIGNlbnRyb2lkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuoeeul+WkjeWQiOWImuS9k+eahOi0qOmHj1xyXG4gICAgICogQHBhcmFtIGNvbXBvc2l0ZSBcclxuICAgICAqL1xyXG4gICAgZ2V0QXJlYShib2RpZXM6IEJvZHlbXSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHRvdGFsQXJlYTogbnVtYmVyID0gMCxcclxuICAgICAgICAgICAgYm9keTogQm9keSwgaTogbnVtYmVyO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XHJcbiAgICAgICAgICAgIHRvdGFsQXJlYSArPSBib2R5LmFyZWE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG90YWxBcmVhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlui9rOWKqOaDr+mHj1xyXG4gICAgICogQHBhcmFtIGJvZGllcyBcclxuICAgICAqL1xyXG4gICAgZ2V0SW5lcnRpYShib2RpZXM6IEJvZHlbXSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHRvdGFsSW5lcnRpYTogbnVtYmVyID0gMCxcclxuICAgICAgICAgICAgYm9keTogQm9keSwgaTogbnVtYmVyO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XHJcbiAgICAgICAgICAgIHRvdGFsSW5lcnRpYSArPSBib2R5LmluZXJ0aWE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG90YWxJbmVydGlhO1xyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports._tempMatrix4 = exports._tempMatrix3 = exports._tempMatrix2 = exports._tempMatrix1 = exports.Matrix = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\n/**\r\n * 2 * 2矩阵\r\n */\r\nclass Matrix {\r\n    constructor(r1, r2) {\r\n        this.r1 = new vector_1.Vector(1, 0);\r\n        this.r2 = new vector_1.Vector(0, 1);\r\n        if (r1 !== undefined && r2 !== undefined) {\r\n            this.set(r1, r2);\r\n        }\r\n    }\r\n    /**\r\n     * 设置矩阵值\r\n     * @param r1\r\n     * @param r2\r\n     */\r\n    set(r1, r2) {\r\n        this.r1.x = r1.x;\r\n        this.r1.y = r1.y;\r\n        this.r2.x = r2.x;\r\n        this.r2.y = r2.y;\r\n    }\r\n    /**\r\n     * 矩阵相加\r\n     * @param m\r\n     * @param mOut\r\n     */\r\n    add(m, mOut) {\r\n        let dest;\r\n        if (mOut !== undefined) {\r\n            dest = mOut;\r\n        }\r\n        else {\r\n            dest = new Matrix();\r\n        }\r\n        dest.r1 = this.r1.add(m.r1, dest.r1);\r\n        dest.r2 = this.r2.add(m.r2, dest.r2);\r\n        return dest;\r\n    }\r\n    /**\r\n     * 矩阵相减\r\n     * @param m\r\n     * @param mOut\r\n     */\r\n    subtract(m, mOut) {\r\n        let dest;\r\n        if (mOut !== undefined) {\r\n            dest = mOut;\r\n        }\r\n        else {\r\n            dest = new Matrix();\r\n        }\r\n        dest.r1 = this.r1.sub(m.r1, dest.r1);\r\n        dest.r2 = this.r2.sub(m.r2, dest.r2);\r\n        return dest;\r\n    }\r\n    /**\r\n     * 矩阵相乘\r\n     * @param m\r\n     * @param mOut\r\n     */\r\n    multiply(m, mOut) {\r\n        let dest;\r\n        if (mOut !== undefined) {\r\n            dest = mOut;\r\n        }\r\n        else {\r\n            dest = new Matrix();\r\n        }\r\n        dest.r1.x = this.r1.x * m.r1.x + this.r1.y * m.r2.x;\r\n        dest.r1.y = this.r1.x * m.r1.y + this.r1.y * m.r2.y;\r\n        dest.r2.x = this.r2.x * m.r1.x + this.r2.y * m.r2.x;\r\n        dest.r2.y = this.r2.x * m.r1.y + this.r2.y * m.r2.y;\r\n        return dest;\r\n    }\r\n    /**\r\n     * 矩阵与 2 维向量相乘\r\n     * @param m\r\n     * @param v\r\n     * @param vOut\r\n     */\r\n    multiplyVec(m, v, vOut) {\r\n        let dest;\r\n        if (vOut !== undefined) {\r\n            dest = vOut;\r\n        }\r\n        else {\r\n            dest = new vector_1.Vector();\r\n        }\r\n        dest.x = m.r1.x * v.x + m.r1.y * v.y;\r\n        dest.y = m.r2.x * v.x + m.r2.y * v.y;\r\n        return dest;\r\n    }\r\n    /**\r\n     * 矩阵乘上一个数\r\n     * @param n\r\n     * @param mOut\r\n     */\r\n    multiplyNum(n, mOut) {\r\n        let dest;\r\n        if (mOut !== undefined) {\r\n            dest = mOut;\r\n        }\r\n        else {\r\n            dest = new Matrix();\r\n        }\r\n        dest.r1 = this.r1.scl(n, dest.r1);\r\n        dest.r2 = this.r1.scl(n, dest.r2);\r\n        return dest;\r\n    }\r\n    /**\r\n     * 矩阵转置\r\n     */\r\n    transpose() {\r\n        let r1y = this.r1.y, r2x = this.r2.x;\r\n        this.r1.y = r2x;\r\n        this.r2.x = r1y;\r\n        return this;\r\n    }\r\n    /**\r\n     * 转换为单位矩阵\r\n     */\r\n    identity() {\r\n        this.r1.x = this.r2.y = 1;\r\n        this.r1.y = this.r2.x = 0;\r\n        return this;\r\n    }\r\n    /**\r\n     *  求矩阵行列式\r\n     */\r\n    determinant() {\r\n        return this.r1.x * this.r2.y - this.r1.y * this.r2.x;\r\n    }\r\n    /**\r\n     * 矩阵求逆\r\n     * @param mOut\r\n     */\r\n    invert(mOut) {\r\n        let dest;\r\n        if (mOut !== undefined) {\r\n            dest = mOut;\r\n        }\r\n        else {\r\n            dest = new Matrix();\r\n        }\r\n        const det = this.determinant();\r\n        if (det === 0)\r\n            return null;\r\n        dest.r1.x = this.r2.y;\r\n        dest.r1.y = -this.r1.y;\r\n        dest.r2.x = -this.r1.x;\r\n        dest.r2.y = this.r1.x;\r\n        dest = dest.multiplyNum((1 / det));\r\n        return dest;\r\n    }\r\n    /**\r\n     * 设置旋转矩阵\r\n     * @param rad\r\n     */\r\n    rotate(rad) {\r\n        let sin = Math.sin(rad), cos = Math.cos(rad);\r\n        this.r1.x = cos;\r\n        this.r1.y = -sin;\r\n        this.r2.x = sin;\r\n        this.r1.y = cos;\r\n        return this;\r\n    }\r\n}\r\nexports.Matrix = Matrix;\r\n;\r\nexports._tempMatrix1 = new Matrix();\r\nexports._tempMatrix2 = new Matrix();\r\nexports._tempMatrix3 = new Matrix();\r\nexports._tempMatrix4 = new Matrix();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n')}])}));